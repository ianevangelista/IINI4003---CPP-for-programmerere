22 serialization::archive 18 0 0 0 0 72 /Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5 78 /Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/build 0 0 1113 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 1 < 1 10 1 11 18446744073709551615 8 iostream 1 11 1 19 18446744073709551615 1 > 1 19 1 20 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 1 < 2 10 2 11 18446744073709551615 8 iterator 2 11 2 19 18446744073709551615 1 > 2 19 2 20 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 6 memory 3 11 3 17 18446744073709551615 1 > 3 17 3 18 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 6 string 4 11 4 17 18446744073709551615 1 > 4 17 4 18 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 1 < 5 10 5 11 18446744073709551615 6 vector 5 11 5 17 18446744073709551615 1 > 5 17 5 18 18446744073709551615 5 using 7 1 7 6 18446744073709551615 9 namespace 7 7 7 16 18446744073709551615 3 std 7 17 7 20 0 1 ; 7 20 7 21 18446744073709551615 5 class 9 1 9 6 18446744073709551615 10 ChessBoard 9 7 9 17 1 1 { 9 18 9 19 18446744073709551615 6 public 10 1 10 7 18446744073709551615 1 : 10 7 10 8 18446744073709551615 4 enum 11 3 11 7 18446744073709551615 5 class 11 8 11 13 18446744073709551615 5 Color 11 14 11 19 2 1 { 11 20 11 21 18446744073709551615 5 WHITE 11 22 11 27 3 1 , 11 27 11 28 18446744073709551615 5 BLACK 12 22 12 27 4 1 } 12 28 12 29 18446744073709551615 1 ; 12 29 12 30 18446744073709551615 5 class 14 3 14 8 18446744073709551615 5 Piece 14 9 14 14 5 1 { 14 15 14 16 18446744073709551615 6 public 15 3 15 9 18446744073709551615 1 : 15 9 15 10 18446744073709551615 5 Piece 16 5 16 10 5 1 ( 16 10 16 11 5 5 Color 16 11 16 16 2 5 color 16 17 16 22 6 1 ) 16 22 16 23 5 1 : 16 24 16 25 5 5 color 16 26 16 31 7 1 ( 16 31 16 32 5 5 color 16 32 16 37 6 1 ) 16 37 16 38 5 1 { 16 39 16 40 18446744073709551615 1 } 16 40 16 41 18446744073709551615 7 virtual 17 5 17 12 18446744073709551615 1 ~ 17 13 17 14 18446744073709551615 5 Piece 17 14 17 19 5 1 ( 17 19 17 20 18446744073709551615 1 ) 17 20 17 21 18446744073709551615 1 { 17 22 17 23 18446744073709551615 1 } 17 23 17 24 18446744073709551615 5 Color 19 5 19 10 2 5 color 19 11 19 16 7 1 ; 19 16 19 17 18446744073709551615 3 std 20 5 20 8 0 2 :: 20 8 20 10 8 6 string 20 10 20 16 9 12 color_string 20 17 20 29 8 1 ( 20 29 20 30 8 1 ) 20 30 20 31 8 5 const 20 32 20 37 18446744073709551615 1 { 20 38 20 39 18446744073709551615 2 if 21 7 21 9 18446744073709551615 1 ( 21 10 21 11 18446744073709551615 5 color 21 11 21 16 7 2 == 21 17 21 19 18446744073709551615 5 Color 21 20 21 25 2 2 :: 21 25 21 27 18446744073709551615 5 WHITE 21 27 21 32 3 1 ) 21 32 21 33 18446744073709551615 6 return 22 9 22 15 18446744073709551615 7 "White" 22 16 22 23 18446744073709551615 1 ; 22 23 22 24 18446744073709551615 4 else 23 7 23 11 18446744073709551615 6 return 24 9 24 15 18446744073709551615 7 "Black" 24 16 24 23 18446744073709551615 1 ; 24 23 24 24 18446744073709551615 1 } 25 5 25 6 18446744073709551615 44 /// Return color and type of the chess piece 27 5 27 49 18446744073709551615 7 virtual 28 5 28 12 18446744073709551615 3 std 28 13 28 16 0 2 :: 28 16 28 18 10 6 string 28 18 28 24 9 4 type 28 25 28 29 10 1 ( 28 29 28 30 10 1 ) 28 30 28 31 10 5 const 28 32 28 37 18446744073709551615 1 = 28 38 28 39 10 1 0 28 40 28 41 18446744073709551615 1 ; 28 41 28 42 18446744073709551615 55 /// Returns true if the given chess piece move is valid 30 5 30 60 18446744073709551615 7 virtual 31 5 31 12 18446744073709551615 4 bool 31 13 31 17 18446744073709551615 10 valid_move 31 18 31 28 11 1 ( 31 28 31 29 11 3 int 31 29 31 32 18446744073709551615 6 from_x 31 33 31 39 12 1 , 31 39 31 40 11 3 int 31 41 31 44 18446744073709551615 6 from_y 31 45 31 51 13 1 , 31 51 31 52 11 3 int 31 53 31 56 18446744073709551615 4 to_x 31 57 31 61 14 1 , 31 61 31 62 11 3 int 31 63 31 66 18446744073709551615 4 to_y 31 67 31 71 15 1 ) 31 71 31 72 11 5 const 31 73 31 78 18446744073709551615 1 = 31 79 31 80 11 1 0 31 81 31 82 18446744073709551615 1 ; 31 82 31 83 18446744073709551615 7 virtual 33 5 33 12 18446744073709551615 6 string 33 13 33 19 9 7 acronym 33 20 33 27 16 1 ( 33 27 33 28 16 1 ) 33 28 33 29 16 5 const 33 30 33 35 18446744073709551615 1 = 33 36 33 37 16 1 0 33 38 33 39 18446744073709551615 1 ; 33 39 33 40 18446744073709551615 1 } 34 3 34 4 18446744073709551615 1 ; 34 4 34 5 18446744073709551615 5 class 36 3 36 8 18446744073709551615 4 King 36 9 36 13 17 1 : 36 14 36 15 18446744073709551615 6 public 36 16 36 22 18446744073709551615 5 Piece 36 23 36 28 5 1 { 36 29 36 30 18446744073709551615 6 public 37 3 37 9 18446744073709551615 1 : 37 9 37 10 18446744073709551615 4 King 38 5 38 9 17 1 ( 38 9 38 10 17 5 Color 38 10 38 15 2 5 color 38 16 38 21 18 1 ) 38 21 38 22 17 1 : 38 23 38 24 17 5 Piece 38 25 38 30 5 1 ( 38 30 38 31 5 5 color 38 31 38 36 18 1 ) 38 36 38 37 5 1 { 38 38 38 39 18446744073709551615 1 } 38 39 38 40 18446744073709551615 3 std 39 5 39 8 0 2 :: 39 8 39 10 10 6 string 39 10 39 16 9 4 type 39 17 39 21 10 1 ( 39 21 39 22 10 1 ) 39 22 39 23 10 5 const 39 24 39 29 18446744073709551615 8 override 39 30 39 38 18446744073709551615 1 { 39 39 39 40 18446744073709551615 6 return 40 7 40 13 18446744073709551615 5 Piece 40 14 40 19 5 2 :: 40 19 40 21 8 12 color_string 40 21 40 33 8 1 ( 40 33 40 34 8 1 ) 40 34 40 35 8 1 + 40 36 40 37 19 7 " King" 40 38 40 45 18446744073709551615 1 ; 40 45 40 46 18446744073709551615 1 } 41 5 41 6 18446744073709551615 4 bool 43 5 43 9 18446744073709551615 10 valid_move 43 10 43 20 11 1 ( 43 20 43 21 11 3 int 43 21 43 24 18446744073709551615 6 from_x 43 25 43 31 20 1 , 43 31 43 32 11 3 int 43 33 43 36 18446744073709551615 6 from_y 43 37 43 43 21 1 , 43 43 43 44 11 3 int 43 45 43 48 18446744073709551615 4 to_x 43 49 43 53 22 1 , 43 53 43 54 11 3 int 43 55 43 58 18446744073709551615 4 to_y 43 59 43 63 23 1 ) 43 63 43 64 11 5 const 43 65 43 70 18446744073709551615 8 override 43 71 43 79 18446744073709551615 1 { 43 80 43 81 18446744073709551615 6 return 44 7 44 13 18446744073709551615 3 std 44 14 44 17 0 2 :: 44 17 44 19 24 3 abs 44 19 44 22 24 1 ( 44 22 44 23 24 6 from_x 44 23 44 29 20 1 - 44 30 44 31 18446744073709551615 4 to_x 44 32 44 36 22 1 ) 44 36 44 37 24 1 + 44 38 44 39 18446744073709551615 3 std 44 40 44 43 0 2 :: 44 43 44 45 24 3 abs 44 45 44 48 24 1 ( 44 48 44 49 24 6 from_y 44 49 44 55 21 1 - 44 56 44 57 18446744073709551615 4 to_y 44 58 44 62 23 1 ) 44 62 44 63 24 2 == 44 64 44 66 18446744073709551615 1 1 44 67 44 68 18446744073709551615 1 ; 44 68 44 69 18446744073709551615 65 // Can only move to one step in either x-direction or y-direction 44 70 44 135 18446744073709551615 1 } 45 5 45 6 18446744073709551615 3 std 47 5 47 8 0 2 :: 47 8 47 10 16 6 string 47 10 47 16 9 7 acronym 47 17 47 24 16 1 ( 47 24 47 25 16 1 ) 47 25 47 26 16 5 const 47 27 47 32 18446744073709551615 8 override 47 33 47 41 18446744073709551615 1 { 47 42 47 43 18446744073709551615 6 return 48 7 48 13 18446744073709551615 1 ( 48 14 48 15 18446744073709551615 5 Piece 48 15 48 20 5 2 :: 48 20 48 22 8 12 color_string 48 22 48 34 8 1 ( 48 34 48 35 8 1 ) 48 35 48 36 8 2 == 48 37 48 39 25 7 "White" 48 40 48 47 18446744073709551615 1 ? 48 48 48 49 18446744073709551615 6 "W-KI" 48 50 48 56 18446744073709551615 1 : 48 57 48 58 18446744073709551615 6 "B-KI" 48 59 48 65 18446744073709551615 1 ) 48 65 48 66 18446744073709551615 1 ; 48 66 48 67 18446744073709551615 1 } 49 5 49 6 18446744073709551615 1 } 50 3 50 4 18446744073709551615 1 ; 50 4 50 5 18446744073709551615 5 class 52 3 52 8 18446744073709551615 6 Knight 52 9 52 15 26 1 : 52 16 52 17 18446744073709551615 6 public 52 18 52 24 18446744073709551615 5 Piece 52 25 52 30 5 1 { 52 31 52 32 18446744073709551615 6 public 53 3 53 9 18446744073709551615 1 : 53 9 53 10 18446744073709551615 6 Knight 54 5 54 11 26 1 ( 54 11 54 12 26 5 Color 54 12 54 17 2 5 color 54 18 54 23 27 1 ) 54 23 54 24 26 1 : 54 25 54 26 26 5 Piece 54 27 54 32 5 1 ( 54 32 54 33 5 5 color 54 33 54 38 27 1 ) 54 38 54 39 5 1 { 54 40 54 41 18446744073709551615 1 } 54 41 54 42 18446744073709551615 3 std 56 5 56 8 0 2 :: 56 8 56 10 10 6 string 56 10 56 16 9 4 type 56 17 56 21 10 1 ( 56 21 56 22 10 1 ) 56 22 56 23 10 5 const 56 24 56 29 18446744073709551615 8 override 56 30 56 38 18446744073709551615 1 { 56 39 56 40 18446744073709551615 6 return 57 7 57 13 18446744073709551615 5 Piece 57 14 57 19 5 2 :: 57 19 57 21 8 12 color_string 57 21 57 33 8 1 ( 57 33 57 34 8 1 ) 57 34 57 35 8 1 + 57 36 57 37 19 9 " Knight" 57 38 57 47 18446744073709551615 1 ; 57 47 57 48 18446744073709551615 1 } 58 5 58 6 18446744073709551615 4 bool 60 5 60 9 18446744073709551615 10 valid_move 60 10 60 20 11 1 ( 60 20 60 21 11 3 int 60 21 60 24 18446744073709551615 6 from_x 60 25 60 31 28 1 , 60 31 60 32 11 3 int 60 33 60 36 18446744073709551615 6 from_y 60 37 60 43 29 1 , 60 43 60 44 11 3 int 60 45 60 48 18446744073709551615 4 to_x 60 49 60 53 30 1 , 60 53 60 54 11 3 int 60 55 60 58 18446744073709551615 4 to_y 60 59 60 63 31 1 ) 60 63 60 64 11 5 const 60 65 60 70 18446744073709551615 8 override 60 71 60 79 18446744073709551615 1 { 60 80 60 81 18446744073709551615 6 return 61 7 61 13 18446744073709551615 3 std 61 14 61 17 0 2 :: 61 17 61 19 24 3 abs 61 19 61 22 24 1 ( 61 22 61 23 24 6 from_x 61 23 61 29 28 1 - 61 30 61 31 18446744073709551615 4 to_x 61 32 61 36 30 1 ) 61 36 61 37 24 1 + 61 38 61 39 18446744073709551615 3 std 61 40 61 43 0 2 :: 61 43 61 45 24 3 abs 61 45 61 48 24 1 ( 61 48 61 49 24 6 from_y 61 49 61 55 29 1 - 61 56 61 57 18446744073709551615 4 to_y 61 58 61 62 31 1 ) 61 62 61 63 24 2 == 61 64 61 66 18446744073709551615 1 3 61 67 61 68 18446744073709551615 1 ; 61 68 61 69 18446744073709551615 80 // Can either move 1 step in x + 2 steps in y or move 2 steps in x + 1 step in y 61 70 61 150 18446744073709551615 1 } 62 5 62 6 18446744073709551615 3 std 64 5 64 8 0 2 :: 64 8 64 10 16 6 string 64 10 64 16 9 7 acronym 64 17 64 24 16 1 ( 64 24 64 25 16 1 ) 64 25 64 26 16 5 const 64 27 64 32 18446744073709551615 8 override 64 33 64 41 18446744073709551615 1 { 64 42 64 43 18446744073709551615 6 return 65 7 65 13 18446744073709551615 1 ( 65 14 65 15 18446744073709551615 5 Piece 65 15 65 20 5 2 :: 65 20 65 22 8 12 color_string 65 22 65 34 8 1 ( 65 34 65 35 8 1 ) 65 35 65 36 8 2 == 65 37 65 39 25 7 "White" 65 40 65 47 18446744073709551615 1 ? 65 48 65 49 18446744073709551615 6 "W-KN" 65 50 65 56 18446744073709551615 1 : 65 57 65 58 18446744073709551615 6 "B-KN" 65 59 65 65 18446744073709551615 1 ) 65 65 65 66 18446744073709551615 1 ; 65 66 65 67 18446744073709551615 1 } 66 5 66 6 18446744073709551615 1 } 67 3 67 4 18446744073709551615 1 ; 67 4 67 5 18446744073709551615 10 ChessBoard 69 3 69 13 1 1 ( 69 13 69 14 1 1 ) 69 14 69 15 1 1 { 69 16 69 17 18446744073709551615 57 // Initialize the squares stored in 8 columns and 8 rows: 70 5 70 62 18446744073709551615 7 squares 71 5 71 12 32 1 . 71 12 71 13 33 6 resize 71 13 71 19 33 1 ( 71 19 71 20 33 1 8 71 20 71 21 18446744073709551615 1 ) 71 21 71 22 33 1 ; 71 22 71 23 18446744073709551615 3 for 72 5 72 8 18446744073709551615 1 ( 72 9 72 10 18446744073709551615 4 auto 72 10 72 14 18446744073709551615 1 & 72 15 72 16 18446744073709551615 13 square_column 72 16 72 29 34 1 : 72 30 72 31 35 7 squares 72 32 72 39 32 1 ) 72 39 72 40 18446744073709551615 13 square_column 73 7 73 20 34 1 . 73 20 73 21 33 6 resize 73 21 73 27 33 1 ( 73 27 73 28 33 1 8 73 28 73 29 18446744073709551615 1 ) 73 29 73 30 33 1 ; 73 30 73 31 18446744073709551615 1 } 74 3 74 4 18446744073709551615 47 /// 8x8 squares occupied by 1 or 0 chess pieces 76 3 76 50 18446744073709551615 6 vector 77 3 77 9 36 1 < 77 9 77 10 18446744073709551615 6 vector 77 10 77 16 36 1 < 77 16 77 17 18446744073709551615 10 unique_ptr 77 17 77 27 37 1 < 77 27 77 28 18446744073709551615 5 Piece 77 28 77 33 5 2 >> 77 33 77 35 18446744073709551615 1 > 77 35 77 36 18446744073709551615 7 squares 77 37 77 44 32 1 ; 77 44 77 45 18446744073709551615 45 /// Move a chess piece if it is a valid move. 79 3 79 48 18446744073709551615 41 /// Does not test for check or checkmate. 80 3 80 44 18446744073709551615 4 bool 81 3 81 7 18446744073709551615 10 move_piece 81 8 81 18 38 1 ( 81 18 81 19 38 5 const 81 19 81 24 18446744073709551615 3 std 81 25 81 28 0 2 :: 81 28 81 30 18446744073709551615 6 string 81 30 81 36 9 1 & 81 37 81 38 18446744073709551615 4 from 81 38 81 42 39 1 , 81 42 81 43 38 5 const 81 44 81 49 18446744073709551615 3 std 81 50 81 53 0 2 :: 81 53 81 55 18446744073709551615 6 string 81 55 81 61 9 1 & 81 62 81 63 18446744073709551615 2 to 81 63 81 65 40 1 ) 81 65 81 66 38 1 { 81 67 81 68 18446744073709551615 3 int 82 5 82 8 18446744073709551615 6 from_x 82 9 82 15 41 1 = 82 16 82 17 18446744073709551615 4 from 82 18 82 22 39 1 [ 82 22 82 23 42 1 0 82 23 82 24 18446744073709551615 1 ] 82 24 82 25 42 1 - 82 26 82 27 18446744073709551615 3 'a' 82 28 82 31 18446744073709551615 1 ; 82 31 82 32 18446744073709551615 3 int 83 5 83 8 18446744073709551615 6 from_y 83 9 83 15 43 1 = 83 16 83 17 18446744073709551615 4 stoi 83 18 83 22 44 1 ( 83 22 83 23 44 6 string 83 23 83 29 9 1 ( 83 29 83 30 45 1 ) 83 30 83 31 45 1 + 83 32 83 33 19 4 from 83 34 83 38 39 1 [ 83 38 83 39 42 1 1 83 39 83 40 18446744073709551615 1 ] 83 40 83 41 42 1 ) 83 41 83 42 44 1 - 83 43 83 44 18446744073709551615 1 1 83 45 83 46 18446744073709551615 1 ; 83 46 83 47 18446744073709551615 3 int 84 5 84 8 18446744073709551615 4 to_x 84 9 84 13 46 1 = 84 14 84 15 18446744073709551615 2 to 84 16 84 18 40 1 [ 84 18 84 19 42 1 0 84 19 84 20 18446744073709551615 1 ] 84 20 84 21 42 1 - 84 22 84 23 18446744073709551615 3 'a' 84 24 84 27 18446744073709551615 1 ; 84 27 84 28 18446744073709551615 3 int 85 5 85 8 18446744073709551615 4 to_y 85 9 85 13 47 1 = 85 14 85 15 18446744073709551615 4 stoi 85 16 85 20 44 1 ( 85 20 85 21 44 6 string 85 21 85 27 9 1 ( 85 27 85 28 45 1 ) 85 28 85 29 45 1 + 85 30 85 31 19 2 to 85 32 85 34 40 1 [ 85 34 85 35 42 1 1 85 35 85 36 18446744073709551615 1 ] 85 36 85 37 42 1 ) 85 37 85 38 44 1 - 85 39 85 40 18446744073709551615 1 1 85 41 85 42 18446744073709551615 1 ; 85 42 85 43 18446744073709551615 4 auto 87 5 87 9 18446744073709551615 1 & 87 10 87 11 18446744073709551615 10 piece_from 87 11 87 21 48 1 = 87 22 87 23 18446744073709551615 7 squares 87 24 87 31 32 1 [ 87 31 87 32 49 6 from_x 87 32 87 38 41 1 ] 87 38 87 39 49 1 [ 87 39 87 40 49 6 from_y 87 40 87 46 43 1 ] 87 46 87 47 49 1 ; 87 47 87 48 18446744073709551615 2 if 88 5 88 7 18446744073709551615 1 ( 88 8 88 9 18446744073709551615 10 piece_from 88 9 88 19 48 1 ) 88 19 88 20 18446744073709551615 1 { 88 21 88 22 18446744073709551615 2 if 89 7 89 9 18446744073709551615 1 ( 89 10 89 11 18446744073709551615 10 piece_from 89 11 89 21 48 2 -> 89 21 89 23 11 10 valid_move 89 23 89 33 11 1 ( 89 33 89 34 11 6 from_x 89 34 89 40 41 1 , 89 40 89 41 11 6 from_y 89 42 89 48 43 1 , 89 48 89 49 11 4 to_x 89 50 89 54 46 1 , 89 54 89 55 11 4 to_y 89 56 89 60 47 1 ) 89 60 89 61 11 1 ) 89 61 89 62 18446744073709551615 1 { 89 63 89 64 18446744073709551615 4 cout 90 9 90 13 50 2 << 90 14 90 16 51 10 piece_from 90 17 90 27 48 2 -> 90 27 90 29 10 4 type 90 29 90 33 10 1 ( 90 33 90 34 10 1 ) 90 34 90 35 10 2 << 90 36 90 38 51 18 " is moving from " 90 39 90 57 18446744073709551615 2 << 90 58 90 60 51 4 from 90 61 90 65 39 2 << 90 66 90 68 51 6 " to " 90 69 90 75 18446744073709551615 2 << 90 76 90 78 51 2 to 90 79 90 81 40 2 << 90 82 90 84 52 4 endl 90 85 90 89 53 1 ; 90 89 90 90 18446744073709551615 4 auto 91 9 91 13 18446744073709551615 1 & 91 14 91 15 18446744073709551615 8 piece_to 91 15 91 23 54 1 = 91 24 91 25 18446744073709551615 7 squares 91 26 91 33 32 1 [ 91 33 91 34 49 4 to_x 91 34 91 38 46 1 ] 91 38 91 39 49 1 [ 91 39 91 40 49 4 to_y 91 40 91 44 47 1 ] 91 44 91 45 49 1 ; 91 45 91 46 18446744073709551615 2 if 92 9 92 11 18446744073709551615 1 ( 92 12 92 13 18446744073709551615 8 piece_to 92 13 92 21 54 1 ) 92 21 92 22 18446744073709551615 1 { 92 23 92 24 18446744073709551615 2 if 93 11 93 13 18446744073709551615 1 ( 93 14 93 15 18446744073709551615 10 piece_from 93 15 93 25 48 2 -> 93 25 93 27 18446744073709551615 5 color 93 27 93 32 7 2 != 93 33 93 35 18446744073709551615 8 piece_to 93 36 93 44 54 2 -> 93 44 93 46 18446744073709551615 5 color 93 46 93 51 7 1 ) 93 51 93 52 18446744073709551615 1 { 93 53 93 54 18446744073709551615 4 cout 94 13 94 17 50 2 << 94 18 94 20 51 8 piece_to 94 21 94 29 54 2 -> 94 29 94 31 10 4 type 94 31 94 35 10 1 ( 94 35 94 36 10 1 ) 94 36 94 37 10 2 << 94 38 94 40 51 25 " is being removed from " 94 41 94 66 18446744073709551615 2 << 94 67 94 69 51 2 to 94 70 94 72 40 2 << 94 73 94 75 52 4 endl 94 76 94 80 53 1 ; 94 80 94 81 18446744073709551615 2 if 95 13 95 15 18446744073709551615 1 ( 95 16 95 17 18446744073709551615 4 auto 95 17 95 21 18446744073709551615 4 king 95 22 95 26 55 1 = 95 27 95 28 18446744073709551615 12 dynamic_cast 95 29 95 41 18446744073709551615 1 < 95 41 95 42 18446744073709551615 4 King 95 42 95 46 17 1 * 95 47 95 48 18446744073709551615 1 > 95 48 95 49 18446744073709551615 1 ( 95 49 95 50 18446744073709551615 8 piece_to 95 50 95 58 54 1 . 95 58 95 59 56 3 get 95 59 95 62 56 1 ( 95 62 95 63 56 1 ) 95 63 95 64 56 1 ) 95 64 95 65 18446744073709551615 1 ) 95 65 95 66 18446744073709551615 4 cout 96 15 96 19 50 2 << 96 20 96 22 51 4 king 96 23 96 27 55 2 -> 96 27 96 29 8 12 color_string 96 29 96 41 8 1 ( 96 41 96 42 8 1 ) 96 42 96 43 8 2 << 96 44 96 46 51 16 " lost the game" 96 47 96 63 18446744073709551615 2 << 96 64 96 66 52 4 endl 96 67 96 71 53 1 ; 96 71 96 72 18446744073709551615 1 } 97 11 97 12 18446744073709551615 4 else 97 13 97 17 18446744073709551615 1 { 97 18 97 19 18446744073709551615 76 // piece in the from square has the same color as the piece in the to square 98 13 98 89 18446744073709551615 4 cout 99 13 99 17 50 2 << 99 18 99 20 51 15 "can not move " 99 21 99 36 18446744073709551615 2 << 99 37 99 39 51 10 piece_from 99 40 99 50 48 2 -> 99 50 99 52 10 4 type 99 52 99 56 10 1 ( 99 56 99 57 10 1 ) 99 57 99 58 10 2 << 99 59 99 61 51 8 " from " 99 62 99 70 18446744073709551615 2 << 99 71 99 73 51 4 from 99 74 99 78 39 2 << 99 79 99 81 51 6 " to " 99 82 99 88 18446744073709551615 2 << 99 89 99 91 51 2 to 99 92 99 94 40 2 << 99 95 99 97 52 4 endl 99 98 99 102 53 1 ; 99 102 99 103 18446744073709551615 6 return 100 13 100 19 18446744073709551615 5 false 100 20 100 25 18446744073709551615 1 ; 100 25 100 26 18446744073709551615 1 } 101 11 101 12 18446744073709551615 1 } 102 9 102 10 18446744073709551615 8 piece_to 103 9 103 17 54 1 = 103 18 103 19 57 4 move 103 20 103 24 58 1 ( 103 24 103 25 58 10 piece_from 103 25 103 35 48 1 ) 103 35 103 36 58 1 ; 103 36 103 37 18446744073709551615 9 drawBoard 104 9 104 18 59 1 ( 104 18 104 19 59 1 ) 104 19 104 20 59 1 ; 104 20 104 21 18446744073709551615 6 return 106 9 106 15 18446744073709551615 4 true 106 16 106 20 18446744073709551615 1 ; 106 20 106 21 18446744073709551615 1 } 107 7 107 8 18446744073709551615 4 else 107 9 107 13 18446744073709551615 1 { 107 14 107 15 18446744073709551615 4 cout 108 9 108 13 50 2 << 108 14 108 16 51 15 "can not move " 108 17 108 32 18446744073709551615 2 << 108 33 108 35 51 10 piece_from 108 36 108 46 48 2 -> 108 46 108 48 10 4 type 108 48 108 52 10 1 ( 108 52 108 53 10 1 ) 108 53 108 54 10 2 << 108 55 108 57 51 8 " from " 108 58 108 66 18446744073709551615 2 << 108 67 108 69 51 4 from 108 70 108 74 39 2 << 108 75 108 77 51 6 " to " 108 78 108 84 18446744073709551615 2 << 108 85 108 87 51 2 to 108 88 108 90 40 2 << 108 91 108 93 52 4 endl 108 94 108 98 53 1 ; 108 98 108 99 18446744073709551615 6 return 109 9 109 15 18446744073709551615 5 false 109 16 109 21 18446744073709551615 1 ; 109 21 109 22 18446744073709551615 1 } 110 7 110 8 18446744073709551615 1 } 111 5 111 6 18446744073709551615 4 else 111 7 111 11 18446744073709551615 1 { 111 12 111 13 18446744073709551615 4 cout 112 7 112 11 50 2 << 112 12 112 14 51 14 "no piece at " 112 15 112 29 18446744073709551615 2 << 112 30 112 32 51 4 from 112 33 112 37 39 2 << 112 38 112 40 52 4 endl 112 41 112 45 53 1 ; 112 45 112 46 18446744073709551615 6 return 113 7 113 13 18446744073709551615 5 false 113 14 113 19 18446744073709551615 1 ; 113 19 113 20 18446744073709551615 1 } 114 5 114 6 18446744073709551615 1 } 115 3 115 4 18446744073709551615 4 void 117 3 117 7 18446744073709551615 9 drawBoard 117 8 117 17 59 1 ( 117 17 117 18 59 1 ) 117 18 117 19 59 1 { 117 20 117 21 18446744073709551615 3 int 118 5 118 8 18446744073709551615 7 counter 118 9 118 16 60 1 = 118 17 118 18 18446744073709551615 1 1 118 19 118 20 18446744073709551615 1 ; 118 20 118 21 18446744073709551615 6 vector 119 5 119 11 36 1 < 119 11 119 12 18446744073709551615 4 char 119 12 119 16 18446744073709551615 1 > 119 16 119 17 18446744073709551615 7 letters 119 18 119 25 61 1 = 119 26 119 27 18446744073709551615 1 { 119 28 119 29 18446744073709551615 3 'A' 119 29 119 32 18446744073709551615 1 , 119 32 119 33 18446744073709551615 3 'B' 119 34 119 37 18446744073709551615 1 , 119 37 119 38 18446744073709551615 3 'C' 119 39 119 42 18446744073709551615 1 , 119 42 119 43 18446744073709551615 3 'D' 119 44 119 47 18446744073709551615 1 , 119 47 119 48 18446744073709551615 3 'E' 119 49 119 52 18446744073709551615 1 , 119 52 119 53 18446744073709551615 3 'F' 119 54 119 57 18446744073709551615 1 , 119 57 119 58 18446744073709551615 3 'G' 119 59 119 62 18446744073709551615 1 , 119 62 119 63 18446744073709551615 3 'H' 119 64 119 67 18446744073709551615 1 } 119 67 119 68 18446744073709551615 1 ; 119 68 119 69 18446744073709551615 4 cout 120 5 120 9 50 2 << 120 10 120 12 51 8 "\n\n\n" 120 13 120 21 18446744073709551615 1 ; 120 21 120 22 18446744073709551615 23 //To get under messages 120 23 120 46 18446744073709551615 3 for 121 5 121 8 18446744073709551615 1 ( 121 9 121 10 18446744073709551615 6 string 121 10 121 16 9 2 :: 121 16 121 18 18446744073709551615 9 size_type 121 18 121 27 62 1 h 121 28 121 29 63 1 = 121 30 121 31 18446744073709551615 1 0 121 32 121 33 18446744073709551615 1 ; 121 33 121 34 18446744073709551615 1 h 121 35 121 36 63 1 < 121 37 121 38 18446744073709551615 7 letters 121 39 121 46 61 1 . 121 46 121 47 64 4 size 121 47 121 51 64 1 ( 121 51 121 52 64 1 ) 121 52 121 53 64 1 ; 121 53 121 54 18446744073709551615 2 ++ 121 55 121 57 18446744073709551615 1 h 121 57 121 58 63 1 ) 121 58 121 59 18446744073709551615 4 cout 122 7 122 11 50 2 << 122 12 122 14 51 9 "       " 122 15 122 24 18446744073709551615 2 << 122 25 122 27 51 7 letters 122 28 122 35 61 1 . 122 35 122 36 65 2 at 122 36 122 38 65 1 ( 122 38 122 39 65 1 h 122 39 122 40 63 1 ) 122 40 122 41 65 2 << 122 42 122 44 51 7 "     " 122 45 122 52 18446744073709551615 1 ; 122 52 122 53 18446744073709551615 4 cout 123 5 123 9 50 2 << 123 10 123 12 52 4 endl 123 13 123 17 53 1 ; 123 17 123 18 18446744073709551615 3 for 124 5 124 8 18446744073709551615 1 ( 124 9 124 10 18446744073709551615 3 int 124 10 124 13 18446744073709551615 1 i 124 14 124 15 66 1 = 124 16 124 17 18446744073709551615 1 0 124 18 124 19 18446744073709551615 1 ; 124 19 124 20 18446744073709551615 1 i 124 21 124 22 66 1 < 124 23 124 24 18446744073709551615 1 8 124 25 124 26 18446744073709551615 1 ; 124 26 124 27 18446744073709551615 2 ++ 124 28 124 30 18446744073709551615 1 i 124 30 124 31 66 1 ) 124 31 124 32 18446744073709551615 1 { 124 33 124 34 18446744073709551615 4 cout 125 7 125 11 50 2 << 125 12 125 14 52 7 counter 125 15 125 22 60 1 ; 125 22 125 23 18446744073709551615 3 for 126 7 126 10 18446744073709551615 1 ( 126 11 126 12 18446744073709551615 3 int 126 12 126 15 18446744073709551615 1 j 126 16 126 17 67 1 = 126 18 126 19 18446744073709551615 1 0 126 20 126 21 18446744073709551615 1 ; 126 21 126 22 18446744073709551615 1 j 126 23 126 24 67 1 < 126 25 126 26 18446744073709551615 1 8 126 27 126 28 18446744073709551615 1 ; 126 28 126 29 18446744073709551615 2 ++ 126 30 126 32 18446744073709551615 1 j 126 32 126 33 67 1 ) 126 33 126 34 18446744073709551615 1 { 126 35 126 36 18446744073709551615 4 auto 127 9 127 13 18446744073709551615 1 & 127 14 127 15 18446744073709551615 5 piece 127 15 127 20 68 1 = 127 21 127 22 18446744073709551615 7 squares 127 23 127 30 32 1 [ 127 30 127 31 49 1 j 127 31 127 32 67 1 ] 127 32 127 33 49 1 [ 127 33 127 34 49 1 i 127 34 127 35 66 1 ] 127 35 127 36 49 1 ; 127 36 127 37 18446744073709551615 2 if 128 9 128 11 18446744073709551615 1 ( 128 12 128 13 18446744073709551615 5 piece 128 13 128 18 68 2 != 128 19 128 21 69 7 nullptr 128 22 128 29 18446744073709551615 1 ) 128 29 128 30 18446744073709551615 4 cout 129 11 129 15 50 2 << 129 16 129 18 51 7 "|____" 129 19 129 26 18446744073709551615 2 << 129 27 129 29 51 5 piece 129 30 129 35 68 2 -> 129 35 129 37 16 7 acronym 129 37 129 44 16 1 ( 129 44 129 45 16 1 ) 129 45 129 46 16 1 + 129 47 129 48 19 6 "____" 129 49 129 55 18446744073709551615 1 ; 129 55 129 56 18446744073709551615 4 else 130 9 130 13 18446744073709551615 4 cout 131 11 131 15 50 2 << 131 16 131 18 51 15 "|____________" 131 19 131 34 18446744073709551615 1 ; 131 34 131 35 18446744073709551615 1 } 132 7 132 8 18446744073709551615 4 cout 133 7 133 11 50 2 << 133 12 133 14 51 5 "|\n" 133 15 133 20 18446744073709551615 1 ; 133 20 133 21 18446744073709551615 2 ++ 134 7 134 9 18446744073709551615 7 counter 134 9 134 16 60 1 ; 134 16 134 17 18446744073709551615 4 cout 135 7 135 11 50 2 << 135 12 135 14 52 4 endl 135 15 135 19 53 1 ; 135 19 135 20 18446744073709551615 1 } 136 5 136 6 18446744073709551615 1 } 137 3 137 4 18446744073709551615 1 } 138 1 138 2 18446744073709551615 1 ; 138 2 138 3 18446744073709551615 3 int 140 1 140 4 18446744073709551615 4 main 140 5 140 9 70 1 ( 140 9 140 10 70 1 ) 140 10 140 11 70 1 { 140 12 140 13 18446744073709551615 10 ChessBoard 141 3 141 13 1 5 board 141 14 141 19 71 1 ; 141 19 141 20 18446744073709551615 5 board 143 3 143 8 71 1 . 143 8 143 9 18446744073709551615 7 squares 143 9 143 16 32 1 [ 143 16 143 17 49 1 4 143 17 143 18 18446744073709551615 1 ] 143 18 143 19 49 1 [ 143 19 143 20 49 1 0 143 20 143 21 18446744073709551615 1 ] 143 21 143 22 49 1 = 143 23 143 24 57 11 make_unique 143 25 143 36 72 1 < 143 36 143 37 72 10 ChessBoard 143 37 143 47 1 2 :: 143 47 143 49 72 4 King 143 49 143 53 17 1 > 143 53 143 54 72 1 ( 143 54 143 55 72 10 ChessBoard 143 55 143 65 1 2 :: 143 65 143 67 18446744073709551615 5 Color 143 67 143 72 2 2 :: 143 72 143 74 18446744073709551615 5 WHITE 143 74 143 79 3 1 ) 143 79 143 80 72 1 ; 143 80 143 81 18446744073709551615 5 board 144 3 144 8 71 1 . 144 8 144 9 18446744073709551615 7 squares 144 9 144 16 32 1 [ 144 16 144 17 49 1 1 144 17 144 18 18446744073709551615 1 ] 144 18 144 19 49 1 [ 144 19 144 20 49 1 0 144 20 144 21 18446744073709551615 1 ] 144 21 144 22 49 1 = 144 23 144 24 57 11 make_unique 144 25 144 36 72 1 < 144 36 144 37 72 10 ChessBoard 144 37 144 47 1 2 :: 144 47 144 49 72 6 Knight 144 49 144 55 26 1 > 144 55 144 56 72 1 ( 144 56 144 57 72 10 ChessBoard 144 57 144 67 1 2 :: 144 67 144 69 18446744073709551615 5 Color 144 69 144 74 2 2 :: 144 74 144 76 18446744073709551615 5 WHITE 144 76 144 81 3 1 ) 144 81 144 82 72 1 ; 144 82 144 83 18446744073709551615 5 board 145 3 145 8 71 1 . 145 8 145 9 18446744073709551615 7 squares 145 9 145 16 32 1 [ 145 16 145 17 49 1 6 145 17 145 18 18446744073709551615 1 ] 145 18 145 19 49 1 [ 145 19 145 20 49 1 0 145 20 145 21 18446744073709551615 1 ] 145 21 145 22 49 1 = 145 23 145 24 57 11 make_unique 145 25 145 36 72 1 < 145 36 145 37 72 10 ChessBoard 145 37 145 47 1 2 :: 145 47 145 49 72 6 Knight 145 49 145 55 26 1 > 145 55 145 56 72 1 ( 145 56 145 57 72 10 ChessBoard 145 57 145 67 1 2 :: 145 67 145 69 18446744073709551615 5 Color 145 69 145 74 2 2 :: 145 74 145 76 18446744073709551615 5 WHITE 145 76 145 81 3 1 ) 145 81 145 82 72 1 ; 145 82 145 83 18446744073709551615 5 board 147 3 147 8 71 1 . 147 8 147 9 18446744073709551615 7 squares 147 9 147 16 32 1 [ 147 16 147 17 49 1 4 147 17 147 18 18446744073709551615 1 ] 147 18 147 19 49 1 [ 147 19 147 20 49 1 7 147 20 147 21 18446744073709551615 1 ] 147 21 147 22 49 1 = 147 23 147 24 57 11 make_unique 147 25 147 36 72 1 < 147 36 147 37 72 10 ChessBoard 147 37 147 47 1 2 :: 147 47 147 49 72 4 King 147 49 147 53 17 1 > 147 53 147 54 72 1 ( 147 54 147 55 72 10 ChessBoard 147 55 147 65 1 2 :: 147 65 147 67 18446744073709551615 5 Color 147 67 147 72 2 2 :: 147 72 147 74 18446744073709551615 5 BLACK 147 74 147 79 4 1 ) 147 79 147 80 72 1 ; 147 80 147 81 18446744073709551615 5 board 148 3 148 8 71 1 . 148 8 148 9 18446744073709551615 7 squares 148 9 148 16 32 1 [ 148 16 148 17 49 1 1 148 17 148 18 18446744073709551615 1 ] 148 18 148 19 49 1 [ 148 19 148 20 49 1 7 148 20 148 21 18446744073709551615 1 ] 148 21 148 22 49 1 = 148 23 148 24 57 11 make_unique 148 25 148 36 72 1 < 148 36 148 37 72 10 ChessBoard 148 37 148 47 1 2 :: 148 47 148 49 72 6 Knight 148 49 148 55 26 1 > 148 55 148 56 72 1 ( 148 56 148 57 72 10 ChessBoard 148 57 148 67 1 2 :: 148 67 148 69 18446744073709551615 5 Color 148 69 148 74 2 2 :: 148 74 148 76 18446744073709551615 5 BLACK 148 76 148 81 4 1 ) 148 81 148 82 72 1 ; 148 82 148 83 18446744073709551615 5 board 149 3 149 8 71 1 . 149 8 149 9 18446744073709551615 7 squares 149 9 149 16 32 1 [ 149 16 149 17 49 1 6 149 17 149 18 18446744073709551615 1 ] 149 18 149 19 49 1 [ 149 19 149 20 49 1 7 149 20 149 21 18446744073709551615 1 ] 149 21 149 22 49 1 = 149 23 149 24 57 11 make_unique 149 25 149 36 72 1 < 149 36 149 37 72 10 ChessBoard 149 37 149 47 1 2 :: 149 47 149 49 72 6 Knight 149 49 149 55 26 1 > 149 55 149 56 72 1 ( 149 56 149 57 72 10 ChessBoard 149 57 149 67 1 2 :: 149 67 149 69 18446744073709551615 5 Color 149 69 149 74 2 2 :: 149 74 149 76 18446744073709551615 5 BLACK 149 76 149 81 4 1 ) 149 81 149 82 72 1 ; 149 82 149 83 18446744073709551615 4 cout 151 3 151 7 50 2 << 151 8 151 10 51 16 "Invalid moves:" 151 11 151 27 18446744073709551615 2 << 151 28 151 30 52 4 endl 151 31 151 35 53 1 ; 151 35 151 36 18446744073709551615 5 board 152 3 152 8 71 1 . 152 8 152 9 38 10 move_piece 152 9 152 19 38 1 ( 152 19 152 20 38 4 "e3" 152 20 152 24 18446744073709551615 1 , 152 24 152 25 38 4 "e2" 152 26 152 30 18446744073709551615 1 ) 152 30 152 31 38 1 ; 152 31 152 32 18446744073709551615 5 board 153 3 153 8 71 1 . 153 8 153 9 38 10 move_piece 153 9 153 19 38 1 ( 153 19 153 20 38 4 "e1" 153 20 153 24 18446744073709551615 1 , 153 24 153 25 38 4 "e3" 153 26 153 30 18446744073709551615 1 ) 153 30 153 31 38 1 ; 153 31 153 32 18446744073709551615 5 board 154 3 154 8 71 1 . 154 8 154 9 38 10 move_piece 154 9 154 19 38 1 ( 154 19 154 20 38 4 "b1" 154 20 154 24 18446744073709551615 1 , 154 24 154 25 38 4 "b2" 154 26 154 30 18446744073709551615 1 ) 154 30 154 31 38 1 ; 154 31 154 32 18446744073709551615 4 cout 155 3 155 7 50 2 << 155 8 155 10 52 4 endl 155 11 155 15 53 1 ; 155 15 155 16 18446744073709551615 4 cout 157 3 157 7 50 2 << 157 8 157 10 51 19 "A simulated game:" 157 11 157 30 18446744073709551615 2 << 157 31 157 33 52 4 endl 157 34 157 38 53 1 ; 157 38 157 39 18446744073709551615 5 board 158 3 158 8 71 1 . 158 8 158 9 38 10 move_piece 158 9 158 19 38 1 ( 158 19 158 20 38 4 "e1" 158 20 158 24 18446744073709551615 1 , 158 24 158 25 38 4 "e2" 158 26 158 30 18446744073709551615 1 ) 158 30 158 31 38 1 ; 158 31 158 32 18446744073709551615 5 board 159 3 159 8 71 1 . 159 8 159 9 38 10 move_piece 159 9 159 19 38 1 ( 159 19 159 20 38 4 "g8" 159 20 159 24 18446744073709551615 1 , 159 24 159 25 38 4 "h6" 159 26 159 30 18446744073709551615 1 ) 159 30 159 31 38 1 ; 159 31 159 32 18446744073709551615 5 board 160 3 160 8 71 1 . 160 8 160 9 38 10 move_piece 160 9 160 19 38 1 ( 160 19 160 20 38 4 "b1" 160 20 160 24 18446744073709551615 1 , 160 24 160 25 38 4 "c3" 160 26 160 30 18446744073709551615 1 ) 160 30 160 31 38 1 ; 160 31 160 32 18446744073709551615 5 board 161 3 161 8 71 1 . 161 8 161 9 38 10 move_piece 161 9 161 19 38 1 ( 161 19 161 20 38 4 "h6" 161 20 161 24 18446744073709551615 1 , 161 24 161 25 38 4 "g8" 161 26 161 30 18446744073709551615 1 ) 161 30 161 31 38 1 ; 161 31 161 32 18446744073709551615 5 board 162 3 162 8 71 1 . 162 8 162 9 38 10 move_piece 162 9 162 19 38 1 ( 162 19 162 20 38 4 "c3" 162 20 162 24 18446744073709551615 1 , 162 24 162 25 38 4 "d5" 162 26 162 30 18446744073709551615 1 ) 162 30 162 31 38 1 ; 162 31 162 32 18446744073709551615 5 board 163 3 163 8 71 1 . 163 8 163 9 38 10 move_piece 163 9 163 19 38 1 ( 163 19 163 20 38 4 "g8" 163 20 163 24 18446744073709551615 1 , 163 24 163 25 38 4 "h6" 163 26 163 30 18446744073709551615 1 ) 163 30 163 31 38 1 ; 163 31 163 32 18446744073709551615 5 board 164 3 164 8 71 1 . 164 8 164 9 38 10 move_piece 164 9 164 19 38 1 ( 164 19 164 20 38 4 "d5" 164 20 164 24 18446744073709551615 1 , 164 24 164 25 38 4 "f6" 164 26 164 30 18446744073709551615 1 ) 164 30 164 31 38 1 ; 164 31 164 32 18446744073709551615 5 board 165 3 165 8 71 1 . 165 8 165 9 38 10 move_piece 165 9 165 19 38 1 ( 165 19 165 20 38 4 "h6" 165 20 165 24 18446744073709551615 1 , 165 24 165 25 38 4 "g8" 165 26 165 30 18446744073709551615 1 ) 165 30 165 31 38 1 ; 165 31 165 32 18446744073709551615 5 board 166 3 166 8 71 1 . 166 8 166 9 38 10 move_piece 166 9 166 19 38 1 ( 166 19 166 20 38 4 "f6" 166 20 166 24 18446744073709551615 1 , 166 24 166 25 38 4 "e8" 166 26 166 30 18446744073709551615 1 ) 166 30 166 31 38 1 ; 166 31 166 32 18446744073709551615 1 } 167 1 167 2 18446744073709551615 0 0 73 0 0 0 22 0 0 1 2 0 3 std 4 1 2 0 10 ChessBoard 5 1 2 0 16 Color:ChessBoard 7 1 2 0 22 WHITE:Color:ChessBoard 7 1 2 0 22 BLACK:Color:ChessBoard 4 1 2 0 16 Piece:ChessBoard 10 1 2 0 87 16:17:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 6 1 2 0 22 color:Piece:ChessBoard 21 1 2 0 29 color_string:Piece:ChessBoard 20 1 2 0 14 string:__1:std 21 1 2 0 21 type:Piece:ChessBoard 21 1 2 0 27 valid_move:Piece:ChessBoard 10 1 2 0 87 31:33:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 10 1 2 0 87 31:45:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 10 1 2 0 87 31:57:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 10 1 2 0 87 31:67:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 21 1 2 0 24 acronym:Piece:ChessBoard 4 1 2 0 15 King:ChessBoard 10 1 2 0 87 38:16:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 8 1 2 0 17 operator+:__1:std 10 1 2 0 87 43:25:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 10 1 2 0 87 43:37:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 10 1 2 0 87 43:49:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 10 1 2 0 87 43:59:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 8 1 2 0 3 abs 8 1 2 0 18 operator==:__1:std 4 1 2 0 17 Knight:ChessBoard 10 1 2 0 87 54:18:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 10 1 2 0 87 60:25:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 10 1 2 0 87 60:37:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 10 1 2 0 87 60:49:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 10 1 2 0 87 60:59:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 6 1 2 0 18 squares:ChessBoard 21 1 2 0 21 resize:vector:__1:std 9 1 2 0 87 72:16:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 21 1 2 0 29 operator*:__wrap_iter:__1:std 31 1 2 0 14 vector:__1:std 31 1 2 0 18 unique_ptr:__1:std 21 1 2 0 21 move_piece:ChessBoard 10 1 2 0 87 81:38:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 10 1 2 0 87 81:63:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 9 1 2 0 86 82:9:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 21 1 2 0 31 operator[]:basic_string:__1:std 9 1 2 0 86 83:9:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 8 1 2 0 12 stoi:__1:std 24 1 2 0 20 basic_string:__1:std 9 1 2 0 86 84:9:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 9 1 2 0 86 85:9:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 9 1 2 0 87 87:11:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 21 1 2 0 25 operator[]:vector:__1:std 9 1 2 0 12 cout:__1:std 8 1 2 0 16 operator:__1:std 21 1 2 0 30 operator:basic_ostream:__1:std 8 1 2 0 12 endl:__1:std 9 1 2 0 87 91:15:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 9 1 2 0 87 95:22:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 21 1 2 0 22 get:unique_ptr:__1:std 21 1 2 0 28 operator=:unique_ptr:__1:std 8 1 2 0 12 move:__1:std 21 1 2 0 20 drawBoard:ChessBoard 9 1 2 0 87 118:9:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 9 1 2 0 88 119:18:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 20 1 2 0 30 size_type:basic_string:__1:std 9 1 2 0 88 121:28:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 21 1 2 0 19 size:vector:__1:std 21 1 2 0 17 at:vector:__1:std 9 1 2 0 88 124:14:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 9 1 2 0 88 126:16:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 9 1 2 0 88 127:15:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 8 1 2 0 18 operator!=:__1:std 8 1 2 0 4 main 9 1 2 0 88 141:14:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 8 1 2 0 19 make_unique:__1:std 0 0 1 0 0 0 81 /Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving5/main.cpp 1599477108