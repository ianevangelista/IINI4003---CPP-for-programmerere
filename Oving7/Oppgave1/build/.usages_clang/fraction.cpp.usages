22 serialization::archive 18 0 0 0 0 81 /Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1 87 /Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/build 0 0 812 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 14 "fraction.hpp" 1 10 1 24 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 1 < 2 10 2 11 18446744073709551615 5 cmath 2 11 2 16 18446744073709551615 1 > 2 16 2 17 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 8 iostream 3 11 3 19 18446744073709551615 1 > 3 19 3 20 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 7 sstream 4 11 4 18 18446744073709551615 1 > 4 18 4 19 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 1 < 5 10 5 11 18446744073709551615 6 string 5 11 5 17 18446744073709551615 1 > 5 17 5 18 18446744073709551615 5 using 7 1 7 6 18446744073709551615 9 namespace 7 7 7 16 18446744073709551615 3 std 7 17 7 20 0 1 ; 7 20 7 21 18446744073709551615 8 Fraction 9 1 9 9 1 2 :: 9 9 9 11 1 8 Fraction 9 11 9 19 1 1 ( 9 19 9 20 1 1 ) 9 20 9 21 1 1 : 9 22 9 23 1 9 numerator 9 24 9 33 2 1 ( 9 33 9 34 1 1 0 9 34 9 35 18446744073709551615 1 ) 9 35 9 36 1 1 , 9 36 9 37 1 11 denominator 9 38 9 49 3 1 ( 9 49 9 50 1 1 1 9 50 9 51 18446744073709551615 1 ) 9 51 9 52 1 1 { 9 53 9 54 18446744073709551615 1 } 9 54 9 55 18446744073709551615 8 Fraction 11 1 11 9 1 2 :: 11 9 11 11 1 8 Fraction 11 11 11 19 1 1 ( 11 19 11 20 1 3 int 11 20 11 23 18446744073709551615 10 numberator 11 24 11 34 4 1 , 11 34 11 35 1 3 int 11 36 11 39 18446744073709551615 11 denominator 11 40 11 51 5 1 ) 11 51 11 52 1 1 { 11 53 11 54 18446744073709551615 3 set 12 3 12 6 6 1 ( 12 6 12 7 6 10 numberator 12 7 12 17 4 1 , 12 17 12 18 6 11 denominator 12 19 12 30 5 1 ) 12 30 12 31 6 1 ; 12 31 12 32 18446744073709551615 1 } 13 1 13 2 18446744073709551615 4 void 15 1 15 5 18446744073709551615 8 Fraction 15 6 15 14 1 2 :: 15 14 15 16 6 3 set 15 16 15 19 6 1 ( 15 19 15 20 6 3 int 15 20 15 23 18446744073709551615 11 numberator_ 15 24 15 35 7 1 , 15 35 15 36 6 3 int 15 37 15 40 18446744073709551615 12 denominator_ 15 41 15 53 8 1 ) 15 53 15 54 6 1 { 15 55 15 56 18446744073709551615 2 if 16 3 16 5 18446744073709551615 1 ( 16 6 16 7 18446744073709551615 12 denominator_ 16 7 16 19 8 2 != 16 20 16 22 18446744073709551615 1 0 16 23 16 24 18446744073709551615 1 ) 16 24 16 25 18446744073709551615 1 { 16 26 16 27 18446744073709551615 9 numerator 17 5 17 14 2 1 = 17 15 17 16 18446744073709551615 11 numberator_ 17 17 17 28 7 1 ; 17 28 17 29 18446744073709551615 11 denominator 18 5 18 16 3 1 = 18 17 18 18 18446744073709551615 12 denominator_ 18 19 18 31 8 1 ; 18 31 18 32 18446744073709551615 6 reduce 19 5 19 11 9 1 ( 19 11 19 12 9 1 ) 19 12 19 13 9 1 ; 19 13 19 14 18446744073709551615 1 } 20 3 20 4 18446744073709551615 4 else 20 5 20 9 18446744073709551615 1 { 20 10 20 11 18446744073709551615 5 throw 21 5 21 10 18446744073709551615 19 "nevneren ble null" 21 11 21 30 18446744073709551615 1 ; 21 30 21 31 18446744073709551615 1 } 22 3 22 4 18446744073709551615 1 } 23 1 23 2 18446744073709551615 8 Fraction 25 1 25 9 1 8 Fraction 25 10 25 18 1 2 :: 25 18 25 20 10 8 operator 25 20 25 28 10 1 + 25 28 25 29 10 1 ( 25 29 25 30 10 5 const 25 30 25 35 18446744073709551615 8 Fraction 25 36 25 44 1 1 & 25 45 25 46 18446744073709551615 5 other 25 46 25 51 11 1 ) 25 51 25 52 10 5 const 25 53 25 58 18446744073709551615 1 { 25 59 25 60 18446744073709551615 8 Fraction 26 3 26 11 1 8 fraction 26 12 26 20 12 1 = 26 21 26 22 18446744073709551615 1 * 26 23 26 24 18446744073709551615 4 this 26 24 26 28 18446744073709551615 1 ; 26 28 26 29 18446744073709551615 8 fraction 27 3 27 11 12 2 += 27 12 27 14 13 5 other 27 15 27 20 11 1 ; 27 20 27 21 18446744073709551615 6 return 28 3 28 9 18446744073709551615 8 fraction 28 10 28 18 12 1 ; 28 18 28 19 18446744073709551615 1 } 29 1 29 2 18446744073709551615 8 Fraction 31 1 31 9 1 1 & 31 10 31 11 13 8 Fraction 31 11 31 19 1 2 :: 31 19 31 21 13 8 operator 31 21 31 29 13 2 += 31 29 31 31 13 1 ( 31 31 31 32 13 5 const 31 32 31 37 18446744073709551615 8 Fraction 31 38 31 46 1 1 & 31 47 31 48 18446744073709551615 5 other 31 48 31 53 14 1 ) 31 53 31 54 13 1 { 31 55 31 56 18446744073709551615 3 set 32 3 32 6 6 1 ( 32 6 32 7 6 9 numerator 32 7 32 16 2 1 * 32 17 32 18 18446744073709551615 5 other 32 19 32 24 14 1 . 32 24 32 25 18446744073709551615 11 denominator 32 25 32 36 3 1 + 32 37 32 38 18446744073709551615 11 denominator 32 39 32 50 3 1 * 32 51 32 52 18446744073709551615 5 other 32 53 32 58 14 1 . 32 58 32 59 18446744073709551615 9 numerator 32 59 32 68 2 1 , 32 68 32 69 6 11 denominator 32 70 32 81 3 1 * 32 82 32 83 18446744073709551615 5 other 32 84 32 89 14 1 . 32 89 32 90 18446744073709551615 11 denominator 32 90 32 101 3 1 ) 32 101 32 102 6 1 ; 32 102 32 103 18446744073709551615 6 return 33 3 33 9 18446744073709551615 1 * 33 10 33 11 18446744073709551615 4 this 33 11 33 15 18446744073709551615 1 ; 33 15 33 16 18446744073709551615 1 } 34 1 34 2 18446744073709551615 8 Fraction 36 1 36 9 1 1 & 36 10 36 11 15 8 Fraction 36 11 36 19 1 2 :: 36 19 36 21 15 8 operator 36 21 36 29 15 2 ++ 36 29 36 31 15 1 ( 36 31 36 32 15 1 ) 36 32 36 33 15 1 { 36 34 36 35 18446744073709551615 9 numerator 37 3 37 12 2 2 += 37 13 37 15 18446744073709551615 11 denominator 37 16 37 27 3 1 ; 37 27 37 28 18446744073709551615 6 return 38 3 38 9 18446744073709551615 1 * 38 10 38 11 18446744073709551615 4 this 38 11 38 15 18446744073709551615 1 ; 38 15 38 16 18446744073709551615 1 } 39 1 39 2 18446744073709551615 8 Fraction 41 1 41 9 1 8 Fraction 41 10 41 18 1 2 :: 41 18 41 20 16 8 operator 41 20 41 28 16 1 - 41 28 41 29 16 1 ( 41 29 41 30 16 5 const 41 30 41 35 18446744073709551615 8 Fraction 41 36 41 44 1 1 & 41 45 41 46 18446744073709551615 5 other 41 46 41 51 17 1 ) 41 51 41 52 16 5 const 41 53 41 58 18446744073709551615 1 { 41 59 41 60 18446744073709551615 8 Fraction 42 3 42 11 1 8 fraction 42 12 42 20 18 1 = 42 21 42 22 18446744073709551615 1 * 42 23 42 24 18446744073709551615 4 this 42 24 42 28 18446744073709551615 1 ; 42 28 42 29 18446744073709551615 8 fraction 43 3 43 11 18 2 -= 43 12 43 14 19 5 other 43 15 43 20 17 1 ; 43 20 43 21 18446744073709551615 6 return 44 3 44 9 18446744073709551615 8 fraction 44 10 44 18 18 1 ; 44 18 44 19 18446744073709551615 1 } 45 1 45 2 18446744073709551615 8 Fraction 47 1 47 9 1 1 & 47 10 47 11 19 8 Fraction 47 11 47 19 1 2 :: 47 19 47 21 19 8 operator 47 21 47 29 19 2 -= 47 29 47 31 19 1 ( 47 31 47 32 19 5 const 47 32 47 37 18446744073709551615 8 Fraction 47 38 47 46 1 1 & 47 47 47 48 18446744073709551615 5 other 47 48 47 53 20 1 ) 47 53 47 54 19 1 { 47 55 47 56 18446744073709551615 3 set 48 3 48 6 6 1 ( 48 6 48 7 6 9 numerator 48 7 48 16 2 1 * 48 17 48 18 18446744073709551615 5 other 48 19 48 24 20 1 . 48 24 48 25 18446744073709551615 11 denominator 48 25 48 36 3 1 - 48 37 48 38 18446744073709551615 11 denominator 48 39 48 50 3 1 * 48 51 48 52 18446744073709551615 5 other 48 53 48 58 20 1 . 48 58 48 59 18446744073709551615 9 numerator 48 59 48 68 2 1 , 48 68 48 69 6 11 denominator 48 70 48 81 3 1 * 48 82 48 83 18446744073709551615 5 other 48 84 48 89 20 1 . 48 89 48 90 18446744073709551615 11 denominator 48 90 48 101 3 1 ) 48 101 48 102 6 1 ; 48 102 48 103 18446744073709551615 6 return 49 3 49 9 18446744073709551615 1 * 49 10 49 11 18446744073709551615 4 this 49 11 49 15 18446744073709551615 1 ; 49 15 49 16 18446744073709551615 1 } 50 1 50 2 18446744073709551615 8 Fraction 52 1 52 9 1 1 & 52 10 52 11 21 8 Fraction 52 11 52 19 1 2 :: 52 19 52 21 21 8 operator 52 21 52 29 21 2 -- 52 29 52 31 21 1 ( 52 31 52 32 21 1 ) 52 32 52 33 21 1 { 52 34 52 35 18446744073709551615 9 numerator 53 3 53 12 2 2 -= 53 13 53 15 18446744073709551615 11 denominator 53 16 53 27 3 1 ; 53 27 53 28 18446744073709551615 6 return 54 3 54 9 18446744073709551615 1 * 54 10 54 11 18446744073709551615 4 this 54 11 54 15 18446744073709551615 1 ; 54 15 54 16 18446744073709551615 1 } 55 1 55 2 18446744073709551615 8 Fraction 57 1 57 9 1 8 Fraction 57 10 57 18 1 2 :: 57 18 57 20 16 8 operator 57 20 57 28 16 1 - 57 28 57 29 16 1 ( 57 29 57 30 16 1 ) 57 30 57 31 16 5 const 57 32 57 37 18446744073709551615 1 { 57 38 57 39 18446744073709551615 8 Fraction 58 3 58 11 1 8 fraction 58 12 58 20 22 1 ; 58 20 58 21 18446744073709551615 8 fraction 59 3 59 11 22 1 . 59 11 59 12 18446744073709551615 9 numerator 59 12 59 21 2 1 = 59 22 59 23 18446744073709551615 1 - 59 24 59 25 18446744073709551615 9 numerator 59 25 59 34 2 1 ; 59 34 59 35 18446744073709551615 8 fraction 60 3 60 11 22 1 . 60 11 60 12 18446744073709551615 11 denominator 60 12 60 23 3 1 = 60 24 60 25 18446744073709551615 11 denominator 60 26 60 37 3 1 ; 60 37 60 38 18446744073709551615 6 return 61 3 61 9 18446744073709551615 8 fraction 61 10 61 18 22 1 ; 61 18 61 19 18446744073709551615 1 } 62 1 62 2 18446744073709551615 8 Fraction 64 1 64 9 1 8 Fraction 64 10 64 18 1 2 :: 64 18 64 20 23 8 operator 64 20 64 28 23 1 * 64 28 64 29 23 1 ( 64 29 64 30 23 5 const 64 30 64 35 18446744073709551615 8 Fraction 64 36 64 44 1 1 & 64 45 64 46 18446744073709551615 5 other 64 46 64 51 24 1 ) 64 51 64 52 23 5 const 64 53 64 58 18446744073709551615 1 { 64 59 64 60 18446744073709551615 8 Fraction 65 3 65 11 1 8 fraction 65 12 65 20 25 1 = 65 21 65 22 18446744073709551615 1 * 65 23 65 24 18446744073709551615 4 this 65 24 65 28 18446744073709551615 1 ; 65 28 65 29 18446744073709551615 8 fraction 66 3 66 11 25 2 *= 66 12 66 14 26 5 other 66 15 66 20 24 1 ; 66 20 66 21 18446744073709551615 6 return 67 3 67 9 18446744073709551615 8 fraction 67 10 67 18 25 1 ; 67 18 67 19 18446744073709551615 1 } 68 1 68 2 18446744073709551615 8 Fraction 70 1 70 9 1 1 & 70 10 70 11 26 8 Fraction 70 11 70 19 1 2 :: 70 19 70 21 26 8 operator 70 21 70 29 26 2 *= 70 29 70 31 26 1 ( 70 31 70 32 26 5 const 70 32 70 37 18446744073709551615 8 Fraction 70 38 70 46 1 1 & 70 47 70 48 18446744073709551615 5 other 70 48 70 53 27 1 ) 70 53 70 54 26 1 { 70 55 70 56 18446744073709551615 3 set 71 3 71 6 6 1 ( 71 6 71 7 6 9 numerator 71 7 71 16 2 1 * 71 17 71 18 18446744073709551615 5 other 71 19 71 24 27 1 . 71 24 71 25 18446744073709551615 9 numerator 71 25 71 34 2 1 , 71 34 71 35 6 11 denominator 71 36 71 47 3 1 * 71 48 71 49 18446744073709551615 5 other 71 50 71 55 27 1 . 71 55 71 56 18446744073709551615 11 denominator 71 56 71 67 3 1 ) 71 67 71 68 6 1 ; 71 68 71 69 18446744073709551615 6 return 72 3 72 9 18446744073709551615 1 * 72 10 72 11 18446744073709551615 4 this 72 11 72 15 18446744073709551615 1 ; 72 15 72 16 18446744073709551615 1 } 73 1 73 2 18446744073709551615 8 Fraction 75 1 75 9 1 8 Fraction 75 10 75 18 1 2 :: 75 18 75 20 28 8 operator 75 20 75 28 28 1 / 75 28 75 29 28 1 ( 75 29 75 30 28 5 const 75 30 75 35 18446744073709551615 8 Fraction 75 36 75 44 1 1 & 75 45 75 46 18446744073709551615 5 other 75 46 75 51 29 1 ) 75 51 75 52 28 5 const 75 53 75 58 18446744073709551615 1 { 75 59 75 60 18446744073709551615 8 Fraction 76 3 76 11 1 8 fraction 76 12 76 20 30 1 = 76 21 76 22 18446744073709551615 1 * 76 23 76 24 18446744073709551615 4 this 76 24 76 28 18446744073709551615 1 ; 76 28 76 29 18446744073709551615 8 fraction 77 3 77 11 30 2 /= 77 12 77 14 31 5 other 77 15 77 20 29 1 ; 77 20 77 21 18446744073709551615 6 return 78 3 78 9 18446744073709551615 8 fraction 78 10 78 18 30 1 ; 78 18 78 19 18446744073709551615 1 } 79 1 79 2 18446744073709551615 8 Fraction 81 1 81 9 1 1 & 81 10 81 11 31 8 Fraction 81 11 81 19 1 2 :: 81 19 81 21 31 8 operator 81 21 81 29 31 2 /= 81 29 81 31 31 1 ( 81 31 81 32 31 5 const 81 32 81 37 18446744073709551615 8 Fraction 81 38 81 46 1 1 & 81 47 81 48 18446744073709551615 5 other 81 48 81 53 32 1 ) 81 53 81 54 31 1 { 81 55 81 56 18446744073709551615 3 set 82 3 82 6 6 1 ( 82 6 82 7 6 9 numerator 82 7 82 16 2 1 * 82 17 82 18 18446744073709551615 5 other 82 19 82 24 32 1 . 82 24 82 25 18446744073709551615 11 denominator 82 25 82 36 3 1 , 82 36 82 37 6 11 denominator 82 38 82 49 3 1 * 82 50 82 51 18446744073709551615 5 other 82 52 82 57 32 1 . 82 57 82 58 18446744073709551615 9 numerator 82 58 82 67 2 1 ) 82 67 82 68 6 1 ; 82 68 82 69 18446744073709551615 6 return 83 3 83 9 18446744073709551615 1 * 83 10 83 11 18446744073709551615 4 this 83 11 83 15 18446744073709551615 1 ; 83 15 83 16 18446744073709551615 1 } 84 1 84 2 18446744073709551615 8 Fraction 86 1 86 9 1 1 & 86 10 86 11 33 8 Fraction 86 11 86 19 1 2 :: 86 19 86 21 33 8 operator 86 21 86 29 33 1 = 86 29 86 30 33 1 ( 86 30 86 31 33 5 const 86 31 86 36 18446744073709551615 8 Fraction 86 37 86 45 1 1 & 86 46 86 47 18446744073709551615 5 other 86 47 86 52 34 1 ) 86 52 86 53 33 1 { 86 54 86 55 18446744073709551615 9 numerator 87 3 87 12 2 1 = 87 13 87 14 18446744073709551615 5 other 87 15 87 20 34 1 . 87 20 87 21 18446744073709551615 9 numerator 87 21 87 30 2 1 ; 87 30 87 31 18446744073709551615 11 denominator 88 3 88 14 3 1 = 88 15 88 16 18446744073709551615 5 other 88 17 88 22 34 1 . 88 22 88 23 18446744073709551615 11 denominator 88 23 88 34 3 1 ; 88 34 88 35 18446744073709551615 6 return 89 3 89 9 18446744073709551615 1 * 89 10 89 11 18446744073709551615 4 this 89 11 89 15 18446744073709551615 1 ; 89 15 89 16 18446744073709551615 1 } 90 1 90 2 18446744073709551615 15 // Oppgave 1 a) 92 1 92 16 18446744073709551615 8 Fraction 93 1 93 9 1 8 Fraction 93 10 93 18 1 2 :: 93 18 93 20 16 8 operator 93 20 93 28 16 1 - 93 28 93 29 16 1 ( 93 29 93 30 16 3 int 93 30 93 33 18446744073709551615 7 integer 93 34 93 41 35 1 ) 93 41 93 42 16 5 const 93 43 93 48 18446744073709551615 1 { 93 49 93 50 18446744073709551615 8 Fraction 94 3 94 11 1 8 fraction 94 12 94 20 36 1 ; 94 20 94 21 18446744073709551615 8 fraction 95 3 95 11 36 1 . 95 11 95 12 6 3 set 95 12 95 15 6 1 ( 95 15 95 16 6 7 integer 95 16 95 23 35 1 ) 95 23 95 24 6 1 ; 95 24 95 25 18446744073709551615 8 fraction 96 3 96 11 36 2 -= 96 12 96 14 19 1 * 96 15 96 16 18446744073709551615 4 this 96 16 96 20 18446744073709551615 1 ; 96 20 96 21 18446744073709551615 6 return 97 3 97 9 18446744073709551615 8 fraction 97 10 97 18 36 1 ; 97 18 97 19 18446744073709551615 1 } 98 1 98 2 18446744073709551615 8 Fraction 100 1 100 9 1 8 operator 100 10 100 18 37 1 - 100 18 100 19 37 1 ( 100 19 100 20 37 3 int 100 20 100 23 18446744073709551615 7 integer 100 24 100 31 38 1 , 100 31 100 32 37 5 const 100 33 100 38 18446744073709551615 8 Fraction 100 39 100 47 1 1 & 100 48 100 49 18446744073709551615 5 other 100 49 100 54 39 1 ) 100 54 100 55 37 1 { 100 56 100 57 18446744073709551615 8 Fraction 101 3 101 11 1 8 fraction 101 12 101 20 40 1 ; 101 20 101 21 18446744073709551615 8 fraction 102 3 102 11 40 1 = 102 12 102 13 33 5 other 102 14 102 19 39 1 - 102 20 102 21 16 7 integer 102 22 102 29 38 1 ; 102 29 102 30 18446744073709551615 6 return 103 3 103 9 18446744073709551615 8 fraction 103 10 103 18 40 1 ; 103 18 103 19 18446744073709551615 1 } 104 1 104 2 18446744073709551615 4 bool 106 1 106 5 18446744073709551615 8 Fraction 106 6 106 14 1 2 :: 106 14 106 16 41 8 operator 106 16 106 24 41 2 == 106 24 106 26 41 1 ( 106 26 106 27 41 5 const 106 27 106 32 18446744073709551615 8 Fraction 106 33 106 41 1 1 & 106 42 106 43 18446744073709551615 5 other 106 43 106 48 42 1 ) 106 48 106 49 41 5 const 106 50 106 55 18446744073709551615 1 { 106 56 106 57 18446744073709551615 6 return 107 3 107 9 18446744073709551615 1 ( 107 10 107 11 18446744073709551615 7 compare 107 11 107 18 43 1 ( 107 18 107 19 43 5 other 107 19 107 24 42 1 ) 107 24 107 25 43 2 == 107 26 107 28 18446744073709551615 1 0 107 29 107 30 18446744073709551615 1 ) 107 30 107 31 18446744073709551615 1 ? 107 32 107 33 18446744073709551615 4 true 107 34 107 38 18446744073709551615 1 : 107 39 107 40 18446744073709551615 5 false 107 41 107 46 18446744073709551615 1 ; 107 46 107 47 18446744073709551615 1 } 108 1 108 2 18446744073709551615 4 bool 110 1 110 5 18446744073709551615 8 Fraction 110 6 110 14 1 2 :: 110 14 110 16 44 8 operator 110 16 110 24 44 2 != 110 24 110 26 44 1 ( 110 26 110 27 44 5 const 110 27 110 32 18446744073709551615 8 Fraction 110 33 110 41 1 1 & 110 42 110 43 18446744073709551615 5 other 110 43 110 48 45 1 ) 110 48 110 49 44 5 const 110 50 110 55 18446744073709551615 1 { 110 56 110 57 18446744073709551615 6 return 111 3 111 9 18446744073709551615 1 ( 111 10 111 11 18446744073709551615 7 compare 111 11 111 18 43 1 ( 111 18 111 19 43 5 other 111 19 111 24 45 1 ) 111 24 111 25 43 2 != 111 26 111 28 18446744073709551615 1 0 111 29 111 30 18446744073709551615 1 ) 111 30 111 31 18446744073709551615 1 ? 111 32 111 33 18446744073709551615 4 true 111 34 111 38 18446744073709551615 1 : 111 39 111 40 18446744073709551615 5 false 111 41 111 46 18446744073709551615 1 ; 111 46 111 47 18446744073709551615 1 } 112 1 112 2 18446744073709551615 4 bool 114 1 114 5 18446744073709551615 8 Fraction 114 6 114 14 1 2 :: 114 14 114 16 46 8 operator 114 16 114 24 46 2 <= 114 24 114 26 46 1 ( 114 26 114 27 46 5 const 114 27 114 32 18446744073709551615 8 Fraction 114 33 114 41 1 1 & 114 42 114 43 18446744073709551615 5 other 114 43 114 48 47 1 ) 114 48 114 49 46 5 const 114 50 114 55 18446744073709551615 1 { 114 56 114 57 18446744073709551615 6 return 115 3 115 9 18446744073709551615 1 ( 115 10 115 11 18446744073709551615 7 compare 115 11 115 18 43 1 ( 115 18 115 19 43 5 other 115 19 115 24 47 1 ) 115 24 115 25 43 2 <= 115 26 115 28 18446744073709551615 1 0 115 29 115 30 18446744073709551615 1 ) 115 30 115 31 18446744073709551615 1 ? 115 32 115 33 18446744073709551615 4 true 115 34 115 38 18446744073709551615 1 : 115 39 115 40 18446744073709551615 5 false 115 41 115 46 18446744073709551615 1 ; 115 46 115 47 18446744073709551615 1 } 116 1 116 2 18446744073709551615 4 bool 118 1 118 5 18446744073709551615 8 Fraction 118 6 118 14 1 2 :: 118 14 118 16 48 8 operator 118 16 118 24 48 2 >= 118 24 118 26 48 1 ( 118 26 118 27 48 5 const 118 27 118 32 18446744073709551615 8 Fraction 118 33 118 41 1 1 & 118 42 118 43 18446744073709551615 5 other 118 43 118 48 49 1 ) 118 48 118 49 48 5 const 118 50 118 55 18446744073709551615 1 { 118 56 118 57 18446744073709551615 6 return 119 3 119 9 18446744073709551615 1 ( 119 10 119 11 18446744073709551615 7 compare 119 11 119 18 43 1 ( 119 18 119 19 43 5 other 119 19 119 24 49 1 ) 119 24 119 25 43 2 >= 119 26 119 28 18446744073709551615 1 0 119 29 119 30 18446744073709551615 1 ) 119 30 119 31 18446744073709551615 1 ? 119 32 119 33 18446744073709551615 4 true 119 34 119 38 18446744073709551615 1 : 119 39 119 40 18446744073709551615 5 false 119 41 119 46 18446744073709551615 1 ; 119 46 119 47 18446744073709551615 1 } 120 1 120 2 18446744073709551615 4 bool 122 1 122 5 18446744073709551615 8 Fraction 122 6 122 14 1 2 :: 122 14 122 16 46 8 operator 122 16 122 24 46 1 < 122 24 122 25 46 1 ( 122 25 122 26 46 5 const 122 26 122 31 18446744073709551615 8 Fraction 122 32 122 40 1 1 & 122 41 122 42 18446744073709551615 5 other 122 42 122 47 50 1 ) 122 47 122 48 46 5 const 122 49 122 54 18446744073709551615 1 { 122 55 122 56 18446744073709551615 6 return 123 3 123 9 18446744073709551615 1 ( 123 10 123 11 18446744073709551615 7 compare 123 11 123 18 43 1 ( 123 18 123 19 43 5 other 123 19 123 24 50 1 ) 123 24 123 25 43 1 < 123 26 123 27 18446744073709551615 1 0 123 28 123 29 18446744073709551615 1 ) 123 29 123 30 18446744073709551615 1 ? 123 31 123 32 18446744073709551615 4 true 123 33 123 37 18446744073709551615 1 : 123 38 123 39 18446744073709551615 5 false 123 40 123 45 18446744073709551615 1 ; 123 45 123 46 18446744073709551615 1 } 124 1 124 2 18446744073709551615 4 bool 126 1 126 5 18446744073709551615 8 Fraction 126 6 126 14 1 2 :: 126 14 126 16 51 8 operator 126 16 126 24 51 1 > 126 24 126 25 51 1 ( 126 25 126 26 51 5 const 126 26 126 31 18446744073709551615 8 Fraction 126 32 126 40 1 1 & 126 41 126 42 18446744073709551615 5 other 126 42 126 47 52 1 ) 126 47 126 48 51 5 const 126 49 126 54 18446744073709551615 1 { 126 55 126 56 18446744073709551615 6 return 127 3 127 9 18446744073709551615 1 ( 127 10 127 11 18446744073709551615 7 compare 127 11 127 18 43 1 ( 127 18 127 19 43 5 other 127 19 127 24 52 1 ) 127 24 127 25 43 1 > 127 26 127 27 18446744073709551615 1 0 127 28 127 29 18446744073709551615 1 ) 127 29 127 30 18446744073709551615 1 ? 127 31 127 32 18446744073709551615 4 true 127 33 127 37 18446744073709551615 1 : 127 38 127 39 18446744073709551615 5 false 127 40 127 45 18446744073709551615 1 ; 127 45 127 46 18446744073709551615 1 } 128 1 128 2 18446744073709551615 69 //------------------------------------------------------------------- 130 1 130 70 18446744073709551615 2 // 131 1 131 3 18446744073709551615 43 // Sørg for at nevneren alltid er positiv. 132 1 132 44 18446744073709551615 56 // Bruker Euclids algoritme for å finne fellesnevneren. 133 1 133 57 18446744073709551615 2 // 134 1 134 3 18446744073709551615 4 void 135 1 135 5 18446744073709551615 8 Fraction 135 6 135 14 1 2 :: 135 14 135 16 9 6 reduce 135 16 135 22 9 1 ( 135 22 135 23 9 1 ) 135 23 135 24 9 1 { 135 25 135 26 18446744073709551615 2 if 136 3 136 5 18446744073709551615 1 ( 136 6 136 7 18446744073709551615 11 denominator 136 7 136 18 3 1 < 136 19 136 20 18446744073709551615 1 0 136 21 136 22 18446744073709551615 1 ) 136 22 136 23 18446744073709551615 1 { 136 24 136 25 18446744073709551615 9 numerator 137 5 137 14 2 1 = 137 15 137 16 18446744073709551615 1 - 137 17 137 18 18446744073709551615 9 numerator 137 18 137 27 2 1 ; 137 27 137 28 18446744073709551615 11 denominator 138 5 138 16 3 1 = 138 17 138 18 18446744073709551615 1 - 138 19 138 20 18446744073709551615 11 denominator 138 20 138 31 3 1 ; 138 31 138 32 18446744073709551615 1 } 139 3 139 4 18446744073709551615 3 int 140 3 140 6 18446744073709551615 1 a 140 7 140 8 53 1 = 140 9 140 10 18446744073709551615 9 numerator 140 11 140 20 2 1 ; 140 20 140 21 18446744073709551615 3 int 141 3 141 6 18446744073709551615 1 b 141 7 141 8 54 1 = 141 9 141 10 18446744073709551615 11 denominator 141 11 141 22 3 1 ; 141 22 141 23 18446744073709551615 3 int 142 3 142 6 18446744073709551615 1 c 142 7 142 8 55 1 ; 142 8 142 9 18446744073709551615 2 if 143 3 143 5 18446744073709551615 1 ( 143 6 143 7 18446744073709551615 1 a 143 7 143 8 53 1 < 143 9 143 10 18446744073709551615 1 0 143 11 143 12 18446744073709551615 1 ) 143 12 143 13 18446744073709551615 1 a 144 5 144 6 53 1 = 144 7 144 8 18446744073709551615 1 - 144 9 144 10 18446744073709551615 1 a 144 10 144 11 53 1 ; 144 11 144 12 18446744073709551615 5 while 146 3 146 8 18446744073709551615 1 ( 146 9 146 10 18446744073709551615 1 b 146 10 146 11 54 1 > 146 12 146 13 18446744073709551615 1 0 146 14 146 15 18446744073709551615 1 ) 146 15 146 16 18446744073709551615 1 { 146 17 146 18 18446744073709551615 1 c 147 5 147 6 55 1 = 147 7 147 8 18446744073709551615 1 a 147 9 147 10 53 1 % 147 11 147 12 18446744073709551615 1 b 147 13 147 14 54 1 ; 147 14 147 15 18446744073709551615 1 a 148 5 148 6 53 1 = 148 7 148 8 18446744073709551615 1 b 148 9 148 10 54 1 ; 148 10 148 11 18446744073709551615 1 b 149 5 149 6 54 1 = 149 7 149 8 18446744073709551615 1 c 149 9 149 10 55 1 ; 149 10 149 11 18446744073709551615 1 } 150 3 150 4 18446744073709551615 9 numerator 151 3 151 12 2 2 /= 151 13 151 15 18446744073709551615 1 a 151 16 151 17 53 1 ; 151 17 151 18 18446744073709551615 11 denominator 152 3 152 14 3 2 /= 152 15 152 17 18446744073709551615 1 a 152 18 152 19 53 1 ; 152 19 152 20 18446744073709551615 1 } 153 1 153 2 18446744073709551615 69 //------------------------------------------------------------------- 155 1 155 70 18446744073709551615 2 // 156 1 156 3 18446744073709551615 65 // Returnerer +1 hvis *this > other, 0 hvis de er like, -1 ellers 157 1 157 66 18446744073709551615 2 // 158 1 158 3 18446744073709551615 3 int 159 1 159 4 18446744073709551615 8 Fraction 159 5 159 13 1 2 :: 159 13 159 15 43 7 compare 159 15 159 22 43 1 ( 159 22 159 23 43 5 const 159 23 159 28 18446744073709551615 8 Fraction 159 29 159 37 1 1 & 159 38 159 39 18446744073709551615 5 other 159 39 159 44 56 1 ) 159 44 159 45 43 5 const 159 46 159 51 18446744073709551615 1 { 159 52 159 53 18446744073709551615 8 Fraction 160 3 160 11 1 8 fraction 160 12 160 20 57 1 = 160 21 160 22 18446744073709551615 1 * 160 23 160 24 18446744073709551615 4 this 160 24 160 28 18446744073709551615 1 - 160 29 160 30 16 5 other 160 31 160 36 56 1 ; 160 36 160 37 18446744073709551615 2 if 161 3 161 5 18446744073709551615 1 ( 161 6 161 7 18446744073709551615 8 fraction 161 7 161 15 57 1 . 161 15 161 16 18446744073709551615 9 numerator 161 16 161 25 2 1 > 161 26 161 27 18446744073709551615 1 0 161 28 161 29 18446744073709551615 1 ) 161 29 161 30 18446744073709551615 6 return 162 5 162 11 18446744073709551615 1 1 162 12 162 13 18446744073709551615 1 ; 162 13 162 14 18446744073709551615 4 else 163 3 163 7 18446744073709551615 2 if 163 8 163 10 18446744073709551615 1 ( 163 11 163 12 18446744073709551615 8 fraction 163 12 163 20 57 1 . 163 20 163 21 18446744073709551615 9 numerator 163 21 163 30 2 2 == 163 31 163 33 18446744073709551615 1 0 163 34 163 35 18446744073709551615 1 ) 163 35 163 36 18446744073709551615 6 return 164 5 164 11 18446744073709551615 1 0 164 12 164 13 18446744073709551615 1 ; 164 13 164 14 18446744073709551615 4 else 165 3 165 7 18446744073709551615 6 return 166 5 166 11 18446744073709551615 1 - 166 12 166 13 18446744073709551615 1 1 166 13 166 14 18446744073709551615 1 ; 166 14 166 15 18446744073709551615 1 } 167 1 167 2 18446744073709551615 0 0 58 0 0 0 22 0 0 1 2 0 3 std 4 1 2 0 8 Fraction 6 1 2 0 18 numerator:Fraction 6 1 2 0 20 denominator:Fraction 10 1 2 0 100 11:24:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 10 1 2 0 100 11:40:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 21 1 2 0 12 set:Fraction 10 1 2 0 100 15:24:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 10 1 2 0 100 15:41:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 21 1 2 0 15 reduce:Fraction 21 1 2 0 18 operator+:Fraction 10 1 2 0 100 25:46:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 9 1 2 0 100 26:12:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 21 1 2 0 19 operator+=:Fraction 10 1 2 0 100 31:48:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 21 1 2 0 19 operator++:Fraction 21 1 2 0 18 operator-:Fraction 10 1 2 0 100 41:46:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 9 1 2 0 100 42:12:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 21 1 2 0 19 operator-=:Fraction 10 1 2 0 100 47:48:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 21 1 2 0 19 operator--:Fraction 9 1 2 0 100 58:12:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 21 1 2 0 18 operator*:Fraction 10 1 2 0 100 64:46:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 9 1 2 0 100 65:12:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 21 1 2 0 19 operator*=:Fraction 10 1 2 0 100 70:48:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 21 1 2 0 18 operator/:Fraction 10 1 2 0 100 75:46:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 9 1 2 0 100 76:12:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 21 1 2 0 19 operator/=:Fraction 10 1 2 0 100 81:48:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 21 1 2 0 18 operator=:Fraction 10 1 2 0 100 86:47:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 10 1 2 0 100 93:34:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 9 1 2 0 100 94:12:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 8 1 2 0 9 operator- 10 1 2 0 101 100:24:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 10 1 2 0 101 100:49:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 9 1 2 0 101 101:12:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 21 1 2 0 19 operator==:Fraction 10 1 2 0 101 106:43:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 21 1 2 0 16 compare:Fraction 21 1 2 0 19 operator!=:Fraction 10 1 2 0 101 110:43:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 21 1 2 0 17 operator:Fraction 10 1 2 0 101 114:43:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 21 1 2 0 19 operator>=:Fraction 10 1 2 0 101 118:43:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 10 1 2 0 101 122:42:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 21 1 2 0 18 operator>:Fraction 10 1 2 0 101 126:42:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 9 1 2 0 100 140:7:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 9 1 2 0 100 141:7:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 9 1 2 0 100 142:7:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 10 1 2 0 101 159:39:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 9 1 2 0 101 160:12:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 0 0 2 0 0 0 94 /Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.cpp 1599656729 94 /Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving7/Oppgave1/fraction.hpp 1599653687