22 serialization::archive 18 0 0 0 0 72 /Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6 78 /Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/build 0 0 1437 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 1 < 1 10 1 11 18446744073709551615 8 iostream 1 11 1 19 18446744073709551615 1 > 1 19 1 20 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 1 < 2 10 2 11 18446744073709551615 8 iterator 2 11 2 19 18446744073709551615 1 > 2 19 2 20 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 6 memory 3 11 3 17 18446744073709551615 1 > 3 17 3 18 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 6 string 4 11 4 17 18446744073709551615 1 > 4 17 4 18 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 1 < 5 10 5 11 18446744073709551615 6 vector 5 11 5 17 18446744073709551615 1 > 5 17 5 18 18446744073709551615 5 using 7 1 7 6 18446744073709551615 9 namespace 7 7 7 16 18446744073709551615 3 std 7 17 7 20 0 1 ; 7 20 7 21 18446744073709551615 5 class 9 1 9 6 18446744073709551615 10 ChessBoard 9 7 9 17 1 1 { 9 18 9 19 18446744073709551615 6 public 10 1 10 7 18446744073709551615 1 : 10 7 10 8 18446744073709551615 4 enum 11 3 11 7 18446744073709551615 5 class 11 8 11 13 18446744073709551615 5 Color 11 14 11 19 2 1 { 11 20 11 21 18446744073709551615 5 WHITE 11 22 11 27 3 1 , 11 27 11 28 18446744073709551615 5 BLACK 12 22 12 27 4 1 } 12 28 12 29 18446744073709551615 1 ; 12 29 12 30 18446744073709551615 5 class 14 3 14 8 18446744073709551615 5 Piece 14 9 14 14 5 1 { 14 15 14 16 18446744073709551615 6 public 15 3 15 9 18446744073709551615 1 : 15 9 15 10 18446744073709551615 5 Piece 16 5 16 10 5 1 ( 16 10 16 11 5 5 Color 16 11 16 16 2 5 color 16 17 16 22 6 1 ) 16 22 16 23 5 1 : 16 24 16 25 5 5 color 16 26 16 31 7 1 ( 16 31 16 32 5 5 color 16 32 16 37 6 1 ) 16 37 16 38 5 1 { 16 39 16 40 18446744073709551615 1 } 16 40 16 41 18446744073709551615 7 virtual 17 5 17 12 18446744073709551615 1 ~ 17 13 17 14 18446744073709551615 5 Piece 17 14 17 19 5 1 ( 17 19 17 20 18446744073709551615 1 ) 17 20 17 21 18446744073709551615 1 { 17 22 17 23 18446744073709551615 1 } 17 23 17 24 18446744073709551615 5 Color 19 5 19 10 2 5 color 19 11 19 16 7 1 ; 19 16 19 17 18446744073709551615 3 std 20 5 20 8 0 2 :: 20 8 20 10 8 6 string 20 10 20 16 9 12 color_string 20 17 20 29 8 1 ( 20 29 20 30 8 1 ) 20 30 20 31 8 5 const 20 32 20 37 18446744073709551615 1 { 20 38 20 39 18446744073709551615 2 if 21 7 21 9 18446744073709551615 1 ( 21 10 21 11 18446744073709551615 5 color 21 11 21 16 7 2 == 21 17 21 19 18446744073709551615 5 Color 21 20 21 25 2 2 :: 21 25 21 27 18446744073709551615 5 WHITE 21 27 21 32 3 1 ) 21 32 21 33 18446744073709551615 6 return 22 9 22 15 18446744073709551615 7 "White" 22 16 22 23 18446744073709551615 1 ; 22 23 22 24 18446744073709551615 4 else 23 7 23 11 18446744073709551615 6 return 24 9 24 15 18446744073709551615 7 "Black" 24 16 24 23 18446744073709551615 1 ; 24 23 24 24 18446744073709551615 1 } 25 5 25 6 18446744073709551615 44 /// Return color and type of the chess piece 27 5 27 49 18446744073709551615 7 virtual 28 5 28 12 18446744073709551615 3 std 28 13 28 16 0 2 :: 28 16 28 18 10 6 string 28 18 28 24 9 4 type 28 25 28 29 10 1 ( 28 29 28 30 10 1 ) 28 30 28 31 10 5 const 28 32 28 37 18446744073709551615 1 = 28 38 28 39 10 1 0 28 40 28 41 18446744073709551615 1 ; 28 41 28 42 18446744073709551615 55 /// Returns true if the given chess piece move is valid 30 5 30 60 18446744073709551615 7 virtual 31 5 31 12 18446744073709551615 4 bool 31 13 31 17 18446744073709551615 10 valid_move 31 18 31 28 11 1 ( 31 28 31 29 11 3 int 31 29 31 32 18446744073709551615 6 from_x 31 33 31 39 12 1 , 31 39 31 40 11 3 int 31 41 31 44 18446744073709551615 6 from_y 31 45 31 51 13 1 , 31 51 31 52 11 3 int 31 53 31 56 18446744073709551615 4 to_x 31 57 31 61 14 1 , 31 61 31 62 11 3 int 31 63 31 66 18446744073709551615 4 to_y 31 67 31 71 15 1 ) 31 71 31 72 11 5 const 31 73 31 78 18446744073709551615 1 = 31 79 31 80 11 1 0 31 81 31 82 18446744073709551615 1 ; 31 82 31 83 18446744073709551615 7 virtual 33 5 33 12 18446744073709551615 6 string 33 13 33 19 9 7 acronym 33 20 33 27 16 1 ( 33 27 33 28 16 1 ) 33 28 33 29 16 5 const 33 30 33 35 18446744073709551615 1 = 33 36 33 37 16 1 0 33 38 33 39 18446744073709551615 1 ; 33 39 33 40 18446744073709551615 1 } 34 3 34 4 18446744073709551615 1 ; 34 4 34 5 18446744073709551615 5 class 36 3 36 8 18446744073709551615 4 King 36 9 36 13 17 1 : 36 14 36 15 18446744073709551615 6 public 36 16 36 22 18446744073709551615 5 Piece 36 23 36 28 5 1 { 36 29 36 30 18446744073709551615 6 public 37 3 37 9 18446744073709551615 1 : 37 9 37 10 18446744073709551615 4 King 38 5 38 9 17 1 ( 38 9 38 10 17 5 Color 38 10 38 15 2 5 color 38 16 38 21 18 1 ) 38 21 38 22 17 1 : 38 23 38 24 17 5 Piece 38 25 38 30 5 1 ( 38 30 38 31 5 5 color 38 31 38 36 18 1 ) 38 36 38 37 5 1 { 38 38 38 39 18446744073709551615 1 } 38 39 38 40 18446744073709551615 3 std 39 5 39 8 0 2 :: 39 8 39 10 10 6 string 39 10 39 16 9 4 type 39 17 39 21 10 1 ( 39 21 39 22 10 1 ) 39 22 39 23 10 5 const 39 24 39 29 18446744073709551615 8 override 39 30 39 38 18446744073709551615 1 { 39 39 39 40 18446744073709551615 6 return 40 7 40 13 18446744073709551615 5 Piece 40 14 40 19 5 2 :: 40 19 40 21 8 12 color_string 40 21 40 33 8 1 ( 40 33 40 34 8 1 ) 40 34 40 35 8 1 + 40 36 40 37 19 7 " King" 40 38 40 45 18446744073709551615 1 ; 40 45 40 46 18446744073709551615 1 } 41 5 41 6 18446744073709551615 4 bool 43 5 43 9 18446744073709551615 10 valid_move 43 10 43 20 11 1 ( 43 20 43 21 11 3 int 43 21 43 24 18446744073709551615 6 from_x 43 25 43 31 20 1 , 43 31 43 32 11 3 int 43 33 43 36 18446744073709551615 6 from_y 43 37 43 43 21 1 , 43 43 43 44 11 3 int 43 45 43 48 18446744073709551615 4 to_x 43 49 43 53 22 1 , 43 53 43 54 11 3 int 43 55 43 58 18446744073709551615 4 to_y 43 59 43 63 23 1 ) 43 63 43 64 11 5 const 43 65 43 70 18446744073709551615 8 override 43 71 43 79 18446744073709551615 1 { 43 80 43 81 18446744073709551615 6 return 44 7 44 13 18446744073709551615 3 std 44 14 44 17 0 2 :: 44 17 44 19 24 3 abs 44 19 44 22 24 1 ( 44 22 44 23 24 6 from_x 44 23 44 29 20 1 - 44 30 44 31 18446744073709551615 4 to_x 44 32 44 36 22 1 ) 44 36 44 37 24 1 + 44 38 44 39 18446744073709551615 3 std 44 40 44 43 0 2 :: 44 43 44 45 24 3 abs 44 45 44 48 24 1 ( 44 48 44 49 24 6 from_y 44 49 44 55 21 1 - 44 56 44 57 18446744073709551615 4 to_y 44 58 44 62 23 1 ) 44 62 44 63 24 2 == 44 64 44 66 18446744073709551615 1 1 44 67 44 68 18446744073709551615 1 ; 44 68 44 69 18446744073709551615 65 // Can only move to one step in either x-direction or y-direction 44 70 44 135 18446744073709551615 1 } 45 5 45 6 18446744073709551615 3 std 47 5 47 8 0 2 :: 47 8 47 10 16 6 string 47 10 47 16 9 7 acronym 47 17 47 24 16 1 ( 47 24 47 25 16 1 ) 47 25 47 26 16 5 const 47 27 47 32 18446744073709551615 8 override 47 33 47 41 18446744073709551615 1 { 47 42 47 43 18446744073709551615 6 return 48 7 48 13 18446744073709551615 1 ( 48 14 48 15 18446744073709551615 5 Piece 48 15 48 20 5 2 :: 48 20 48 22 8 12 color_string 48 22 48 34 8 1 ( 48 34 48 35 8 1 ) 48 35 48 36 8 2 == 48 37 48 39 25 7 "White" 48 40 48 47 18446744073709551615 1 ? 48 48 48 49 18446744073709551615 6 "W-KI" 48 50 48 56 18446744073709551615 1 : 48 57 48 58 18446744073709551615 6 "B-KI" 48 59 48 65 18446744073709551615 1 ) 48 65 48 66 18446744073709551615 1 ; 48 66 48 67 18446744073709551615 1 } 49 5 49 6 18446744073709551615 1 } 50 3 50 4 18446744073709551615 1 ; 50 4 50 5 18446744073709551615 5 class 52 3 52 8 18446744073709551615 6 Knight 52 9 52 15 26 1 : 52 16 52 17 18446744073709551615 6 public 52 18 52 24 18446744073709551615 5 Piece 52 25 52 30 5 1 { 52 31 52 32 18446744073709551615 6 public 53 3 53 9 18446744073709551615 1 : 53 9 53 10 18446744073709551615 6 Knight 54 5 54 11 26 1 ( 54 11 54 12 26 5 Color 54 12 54 17 2 5 color 54 18 54 23 27 1 ) 54 23 54 24 26 1 : 54 25 54 26 26 5 Piece 54 27 54 32 5 1 ( 54 32 54 33 5 5 color 54 33 54 38 27 1 ) 54 38 54 39 5 1 { 54 40 54 41 18446744073709551615 1 } 54 41 54 42 18446744073709551615 3 std 56 5 56 8 0 2 :: 56 8 56 10 10 6 string 56 10 56 16 9 4 type 56 17 56 21 10 1 ( 56 21 56 22 10 1 ) 56 22 56 23 10 5 const 56 24 56 29 18446744073709551615 8 override 56 30 56 38 18446744073709551615 1 { 56 39 56 40 18446744073709551615 6 return 57 7 57 13 18446744073709551615 5 Piece 57 14 57 19 5 2 :: 57 19 57 21 8 12 color_string 57 21 57 33 8 1 ( 57 33 57 34 8 1 ) 57 34 57 35 8 1 + 57 36 57 37 19 9 " Knight" 57 38 57 47 18446744073709551615 1 ; 57 47 57 48 18446744073709551615 1 } 58 5 58 6 18446744073709551615 4 bool 60 5 60 9 18446744073709551615 10 valid_move 60 10 60 20 11 1 ( 60 20 60 21 11 3 int 60 21 60 24 18446744073709551615 6 from_x 60 25 60 31 28 1 , 60 31 60 32 11 3 int 60 33 60 36 18446744073709551615 6 from_y 60 37 60 43 29 1 , 60 43 60 44 11 3 int 60 45 60 48 18446744073709551615 4 to_x 60 49 60 53 30 1 , 60 53 60 54 11 3 int 60 55 60 58 18446744073709551615 4 to_y 60 59 60 63 31 1 ) 60 63 60 64 11 5 const 60 65 60 70 18446744073709551615 8 override 60 71 60 79 18446744073709551615 1 { 60 80 60 81 18446744073709551615 6 return 61 7 61 13 18446744073709551615 3 std 61 14 61 17 0 2 :: 61 17 61 19 24 3 abs 61 19 61 22 24 1 ( 61 22 61 23 24 6 from_x 61 23 61 29 28 1 - 61 30 61 31 18446744073709551615 4 to_x 61 32 61 36 30 1 ) 61 36 61 37 24 1 + 61 38 61 39 18446744073709551615 3 std 61 40 61 43 0 2 :: 61 43 61 45 24 3 abs 61 45 61 48 24 1 ( 61 48 61 49 24 6 from_y 61 49 61 55 29 1 - 61 56 61 57 18446744073709551615 4 to_y 61 58 61 62 31 1 ) 61 62 61 63 24 2 == 61 64 61 66 18446744073709551615 1 3 61 67 61 68 18446744073709551615 1 ; 61 68 61 69 18446744073709551615 80 // Can either move 1 step in x + 2 steps in y or move 2 steps in x + 1 step in y 61 70 61 150 18446744073709551615 1 } 62 5 62 6 18446744073709551615 3 std 64 5 64 8 0 2 :: 64 8 64 10 16 6 string 64 10 64 16 9 7 acronym 64 17 64 24 16 1 ( 64 24 64 25 16 1 ) 64 25 64 26 16 5 const 64 27 64 32 18446744073709551615 8 override 64 33 64 41 18446744073709551615 1 { 64 42 64 43 18446744073709551615 6 return 65 7 65 13 18446744073709551615 1 ( 65 14 65 15 18446744073709551615 5 Piece 65 15 65 20 5 2 :: 65 20 65 22 8 12 color_string 65 22 65 34 8 1 ( 65 34 65 35 8 1 ) 65 35 65 36 8 2 == 65 37 65 39 25 7 "White" 65 40 65 47 18446744073709551615 1 ? 65 48 65 49 18446744073709551615 6 "W-KN" 65 50 65 56 18446744073709551615 1 : 65 57 65 58 18446744073709551615 6 "B-KN" 65 59 65 65 18446744073709551615 1 ) 65 65 65 66 18446744073709551615 1 ; 65 66 65 67 18446744073709551615 1 } 66 5 66 6 18446744073709551615 1 } 67 3 67 4 18446744073709551615 1 ; 67 4 67 5 18446744073709551615 10 ChessBoard 69 3 69 13 1 1 ( 69 13 69 14 1 1 ) 69 14 69 15 1 1 { 69 16 69 17 18446744073709551615 57 // Initialize the squares stored in 8 columns and 8 rows: 70 5 70 62 18446744073709551615 7 squares 71 5 71 12 32 1 . 71 12 71 13 33 6 resize 71 13 71 19 33 1 ( 71 19 71 20 33 1 8 71 20 71 21 18446744073709551615 1 ) 71 21 71 22 33 1 ; 71 22 71 23 18446744073709551615 3 for 72 5 72 8 18446744073709551615 1 ( 72 9 72 10 18446744073709551615 4 auto 72 10 72 14 18446744073709551615 1 & 72 15 72 16 18446744073709551615 13 square_column 72 16 72 29 34 1 : 72 30 72 31 35 7 squares 72 32 72 39 32 1 ) 72 39 72 40 18446744073709551615 13 square_column 73 7 73 20 34 1 . 73 20 73 21 33 6 resize 73 21 73 27 33 1 ( 73 27 73 28 33 1 8 73 28 73 29 18446744073709551615 1 ) 73 29 73 30 33 1 ; 73 30 73 31 18446744073709551615 1 } 74 3 74 4 18446744073709551615 47 /// 8x8 squares occupied by 1 or 0 chess pieces 76 3 76 50 18446744073709551615 6 vector 77 3 77 9 36 1 < 77 9 77 10 18446744073709551615 6 vector 77 10 77 16 36 1 < 77 16 77 17 18446744073709551615 10 unique_ptr 77 17 77 27 37 1 < 77 27 77 28 18446744073709551615 5 Piece 77 28 77 33 5 2 >> 77 33 77 35 18446744073709551615 1 > 77 35 77 36 18446744073709551615 7 squares 77 37 77 44 32 1 ; 77 44 77 45 18446744073709551615 8 function 79 3 79 11 38 1 < 79 11 79 12 18446744073709551615 4 void 79 12 79 16 18446744073709551615 1 ( 79 16 79 17 18446744073709551615 5 const 79 17 79 22 18446744073709551615 5 Piece 79 23 79 28 5 1 & 79 29 79 30 18446744073709551615 5 piece 79 30 79 35 39 1 , 79 35 79 36 18446744073709551615 5 const 79 37 79 42 18446744073709551615 6 string 79 43 79 49 9 1 & 79 50 79 51 18446744073709551615 4 from 79 51 79 55 40 1 , 79 55 79 56 18446744073709551615 5 const 79 57 79 62 18446744073709551615 6 string 79 63 79 69 9 1 & 79 70 79 71 18446744073709551615 2 to 79 71 79 73 41 1 ) 79 73 79 74 18446744073709551615 1 > 79 74 79 75 18446744073709551615 13 on_piece_move 79 76 79 89 42 1 ; 79 89 79 90 18446744073709551615 8 function 80 3 80 11 38 1 < 80 11 80 12 18446744073709551615 4 void 80 12 80 16 18446744073709551615 1 ( 80 16 80 17 18446744073709551615 5 const 80 17 80 22 18446744073709551615 5 Piece 80 23 80 28 5 1 & 80 29 80 30 18446744073709551615 5 piece 80 30 80 35 39 1 , 80 35 80 36 18446744073709551615 5 const 80 37 80 42 18446744073709551615 6 string 80 43 80 49 9 1 & 80 50 80 51 18446744073709551615 6 square 80 51 80 57 43 1 ) 80 57 80 58 18446744073709551615 1 > 80 58 80 59 18446744073709551615 16 on_piece_removed 80 60 80 76 44 1 ; 80 76 80 77 18446744073709551615 8 function 81 3 81 11 38 1 < 81 11 81 12 18446744073709551615 4 void 81 12 81 16 18446744073709551615 1 ( 81 16 81 17 18446744073709551615 5 Color 81 17 81 22 2 5 color 81 23 81 28 45 1 ) 81 28 81 29 18446744073709551615 1 > 81 29 81 30 18446744073709551615 12 on_lost_game 81 31 81 43 46 1 ; 81 43 81 44 18446744073709551615 8 function 82 3 82 11 38 1 < 82 11 82 12 18446744073709551615 4 void 82 12 82 16 18446744073709551615 1 ( 82 16 82 17 18446744073709551615 5 const 82 17 82 22 18446744073709551615 5 Piece 82 23 82 28 5 1 & 82 29 82 30 18446744073709551615 5 piece 82 30 82 35 39 1 , 82 35 82 36 18446744073709551615 5 const 82 37 82 42 18446744073709551615 6 string 82 43 82 49 9 1 & 82 50 82 51 18446744073709551615 4 from 82 51 82 55 40 1 , 82 55 82 56 18446744073709551615 5 const 82 57 82 62 18446744073709551615 6 string 82 63 82 69 9 1 & 82 70 82 71 18446744073709551615 2 to 82 71 82 73 41 1 ) 82 73 82 74 18446744073709551615 1 > 82 74 82 75 18446744073709551615 21 on_piece_move_invalid 82 76 82 97 47 1 ; 82 97 82 98 18446744073709551615 8 function 83 3 83 11 38 1 < 83 11 83 12 18446744073709551615 4 void 83 12 83 16 18446744073709551615 1 ( 83 16 83 17 18446744073709551615 5 const 83 17 83 22 18446744073709551615 6 string 83 23 83 29 9 1 & 83 30 83 31 18446744073709551615 6 square 83 31 83 37 43 1 ) 83 37 83 38 18446744073709551615 1 > 83 38 83 39 18446744073709551615 21 on_piece_move_missing 83 40 83 61 48 1 ; 83 61 83 62 18446744073709551615 8 function 84 3 84 11 38 1 < 84 11 84 12 18446744073709551615 4 void 84 12 84 16 18446744073709551615 1 ( 84 16 84 17 18446744073709551615 1 ) 84 17 84 18 18446744073709551615 1 > 84 18 84 19 18446744073709551615 16 after_piece_move 84 20 84 36 49 1 ; 84 36 84 37 18446744073709551615 45 /// Move a chess piece if it is a valid move. 86 3 86 48 18446744073709551615 41 /// Does not test for check or checkmate. 87 3 87 44 18446744073709551615 4 bool 88 3 88 7 18446744073709551615 10 move_piece 88 8 88 18 50 1 ( 88 18 88 19 50 5 const 88 19 88 24 18446744073709551615 3 std 88 25 88 28 0 2 :: 88 28 88 30 18446744073709551615 6 string 88 30 88 36 9 1 & 88 37 88 38 18446744073709551615 4 from 88 38 88 42 51 1 , 88 42 88 43 50 5 const 88 44 88 49 18446744073709551615 3 std 88 50 88 53 0 2 :: 88 53 88 55 18446744073709551615 6 string 88 55 88 61 9 1 & 88 62 88 63 18446744073709551615 2 to 88 63 88 65 52 1 ) 88 65 88 66 50 1 { 88 67 88 68 18446744073709551615 3 int 89 5 89 8 18446744073709551615 6 from_x 89 9 89 15 53 1 = 89 16 89 17 18446744073709551615 4 from 89 18 89 22 51 1 [ 89 22 89 23 54 1 0 89 23 89 24 18446744073709551615 1 ] 89 24 89 25 54 1 - 89 26 89 27 18446744073709551615 3 'a' 89 28 89 31 18446744073709551615 1 ; 89 31 89 32 18446744073709551615 3 int 90 5 90 8 18446744073709551615 6 from_y 90 9 90 15 55 1 = 90 16 90 17 18446744073709551615 4 stoi 90 18 90 22 56 1 ( 90 22 90 23 56 6 string 90 23 90 29 9 1 ( 90 29 90 30 57 1 ) 90 30 90 31 57 1 + 90 32 90 33 19 4 from 90 34 90 38 51 1 [ 90 38 90 39 54 1 1 90 39 90 40 18446744073709551615 1 ] 90 40 90 41 54 1 ) 90 41 90 42 56 1 - 90 43 90 44 18446744073709551615 1 1 90 45 90 46 18446744073709551615 1 ; 90 46 90 47 18446744073709551615 3 int 91 5 91 8 18446744073709551615 4 to_x 91 9 91 13 58 1 = 91 14 91 15 18446744073709551615 2 to 91 16 91 18 52 1 [ 91 18 91 19 54 1 0 91 19 91 20 18446744073709551615 1 ] 91 20 91 21 54 1 - 91 22 91 23 18446744073709551615 3 'a' 91 24 91 27 18446744073709551615 1 ; 91 27 91 28 18446744073709551615 3 int 92 5 92 8 18446744073709551615 4 to_y 92 9 92 13 59 1 = 92 14 92 15 18446744073709551615 4 stoi 92 16 92 20 56 1 ( 92 20 92 21 56 6 string 92 21 92 27 9 1 ( 92 27 92 28 57 1 ) 92 28 92 29 57 1 + 92 30 92 31 19 2 to 92 32 92 34 52 1 [ 92 34 92 35 54 1 1 92 35 92 36 18446744073709551615 1 ] 92 36 92 37 54 1 ) 92 37 92 38 56 1 - 92 39 92 40 18446744073709551615 1 1 92 41 92 42 18446744073709551615 1 ; 92 42 92 43 18446744073709551615 4 auto 94 5 94 9 18446744073709551615 1 & 94 10 94 11 18446744073709551615 10 piece_from 94 11 94 21 60 1 = 94 22 94 23 18446744073709551615 7 squares 94 24 94 31 32 1 [ 94 31 94 32 61 6 from_x 94 32 94 38 53 1 ] 94 38 94 39 61 1 [ 94 39 94 40 61 6 from_y 94 40 94 46 55 1 ] 94 46 94 47 61 1 ; 94 47 94 48 18446744073709551615 2 if 95 5 95 7 18446744073709551615 1 ( 95 8 95 9 18446744073709551615 10 piece_from 95 9 95 19 60 1 ) 95 19 95 20 18446744073709551615 1 { 95 21 95 22 18446744073709551615 2 if 96 7 96 9 18446744073709551615 1 ( 96 10 96 11 18446744073709551615 10 piece_from 96 11 96 21 60 2 -> 96 21 96 23 11 10 valid_move 96 23 96 33 11 1 ( 96 33 96 34 11 6 from_x 96 34 96 40 53 1 , 96 40 96 41 11 6 from_y 96 42 96 48 55 1 , 96 48 96 49 11 4 to_x 96 50 96 54 58 1 , 96 54 96 55 11 4 to_y 96 56 96 60 59 1 ) 96 60 96 61 11 1 ) 96 61 96 62 18446744073709551615 1 { 96 63 96 64 18446744073709551615 2 if 97 9 97 11 18446744073709551615 1 ( 97 12 97 13 18446744073709551615 13 on_piece_move 97 13 97 26 42 1 ) 97 26 97 27 18446744073709551615 13 on_piece_move 98 11 98 24 42 1 ( 98 24 98 25 62 1 * 98 25 98 26 63 10 piece_from 98 26 98 36 60 1 , 98 36 98 37 62 4 from 98 38 98 42 51 1 , 98 42 98 43 62 2 to 98 44 98 46 52 1 ) 98 46 98 47 62 1 ; 98 47 98 48 18446744073709551615 4 auto 99 9 99 13 18446744073709551615 1 & 99 14 99 15 18446744073709551615 8 piece_to 99 15 99 23 64 1 = 99 24 99 25 18446744073709551615 7 squares 99 26 99 33 32 1 [ 99 33 99 34 61 4 to_x 99 34 99 38 58 1 ] 99 38 99 39 61 1 [ 99 39 99 40 61 4 to_y 99 40 99 44 59 1 ] 99 44 99 45 61 1 ; 99 45 99 46 18446744073709551615 2 if 100 9 100 11 18446744073709551615 1 ( 100 12 100 13 18446744073709551615 8 piece_to 100 13 100 21 64 1 ) 100 21 100 22 18446744073709551615 1 { 100 23 100 24 18446744073709551615 2 if 101 11 101 13 18446744073709551615 1 ( 101 14 101 15 18446744073709551615 10 piece_from 101 15 101 25 60 2 -> 101 25 101 27 18446744073709551615 5 color 101 27 101 32 7 2 != 101 33 101 35 18446744073709551615 8 piece_to 101 36 101 44 64 2 -> 101 44 101 46 18446744073709551615 5 color 101 46 101 51 7 1 ) 101 51 101 52 18446744073709551615 1 { 101 53 101 54 18446744073709551615 2 if 102 13 102 15 18446744073709551615 1 ( 102 16 102 17 18446744073709551615 16 on_piece_removed 102 17 102 33 44 1 ) 102 33 102 34 18446744073709551615 16 on_piece_removed 103 15 103 31 44 1 ( 103 31 103 32 62 1 * 103 32 103 33 63 8 piece_to 103 33 103 41 64 1 , 103 41 103 42 62 2 to 103 43 103 45 52 1 ) 103 45 103 46 62 1 ; 103 46 103 47 18446744073709551615 2 if 104 13 104 15 18446744073709551615 1 ( 104 16 104 17 18446744073709551615 4 auto 104 17 104 21 18446744073709551615 4 king 104 22 104 26 65 1 = 104 27 104 28 18446744073709551615 12 dynamic_cast 104 29 104 41 18446744073709551615 1 < 104 41 104 42 18446744073709551615 4 King 104 42 104 46 17 1 * 104 47 104 48 18446744073709551615 1 > 104 48 104 49 18446744073709551615 1 ( 104 49 104 50 18446744073709551615 8 piece_to 104 50 104 58 64 1 . 104 58 104 59 66 3 get 104 59 104 62 66 1 ( 104 62 104 63 66 1 ) 104 63 104 64 66 1 ) 104 64 104 65 18446744073709551615 1 ) 104 65 104 66 18446744073709551615 1 { 104 67 104 68 18446744073709551615 4 cout 105 15 105 19 67 2 << 105 20 105 22 68 4 king 105 23 105 27 65 2 -> 105 27 105 29 8 12 color_string 105 29 105 41 8 1 ( 105 41 105 42 8 1 ) 105 42 105 43 8 2 << 105 44 105 46 68 16 " lost the game" 105 47 105 63 18446744073709551615 2 << 105 64 105 66 69 4 endl 105 67 105 71 70 1 ; 105 71 105 72 18446744073709551615 1 } 106 13 106 14 18446744073709551615 1 } 107 11 107 12 18446744073709551615 4 else 107 13 107 17 18446744073709551615 1 { 107 18 107 19 18446744073709551615 2 if 108 13 108 15 18446744073709551615 1 ( 108 16 108 17 18446744073709551615 21 on_piece_move_invalid 108 17 108 38 47 1 ) 108 38 108 39 18446744073709551615 21 on_piece_move_invalid 109 15 109 36 47 1 ( 109 36 109 37 62 1 * 109 37 109 38 63 10 piece_from 109 38 109 48 60 1 , 109 48 109 49 62 4 from 109 50 109 54 51 1 , 109 54 109 55 62 2 to 109 56 109 58 52 1 ) 109 58 109 59 62 1 ; 109 59 109 60 18446744073709551615 6 return 110 13 110 19 18446744073709551615 5 false 110 20 110 25 18446744073709551615 1 ; 110 25 110 26 18446744073709551615 1 } 111 11 111 12 18446744073709551615 1 } 112 9 112 10 18446744073709551615 2 if 114 9 114 11 18446744073709551615 1 ( 114 12 114 13 18446744073709551615 10 piece_from 114 13 114 23 60 2 != 114 24 114 26 71 8 piece_to 114 27 114 35 64 1 ) 114 35 114 36 18446744073709551615 1 { 114 37 114 38 18446744073709551615 8 piece_to 115 11 115 19 64 1 = 115 20 115 21 72 4 move 115 22 115 26 73 1 ( 115 26 115 27 73 10 piece_from 115 27 115 37 60 1 ) 115 37 115 38 73 1 ; 115 38 115 39 18446744073709551615 2 if 116 11 116 13 18446744073709551615 1 ( 116 14 116 15 18446744073709551615 16 after_piece_move 116 15 116 31 49 1 ) 116 31 116 32 18446744073709551615 1 { 116 33 116 34 18446744073709551615 16 after_piece_move 117 13 117 29 49 1 ( 117 29 117 30 62 1 ) 117 30 117 31 62 1 ; 117 31 117 32 18446744073709551615 1 } 118 11 118 12 18446744073709551615 6 return 119 11 119 17 18446744073709551615 4 true 119 18 119 22 18446744073709551615 1 ; 119 22 119 23 18446744073709551615 1 } 120 9 120 10 18446744073709551615 4 else 120 11 120 15 18446744073709551615 1 { 120 16 120 17 18446744073709551615 6 return 121 11 121 17 18446744073709551615 5 false 121 18 121 23 18446744073709551615 1 ; 121 23 121 24 18446744073709551615 1 } 122 9 122 10 18446744073709551615 1 } 123 7 123 8 18446744073709551615 4 else 123 9 123 13 18446744073709551615 1 { 123 14 123 15 18446744073709551615 2 if 124 9 124 11 18446744073709551615 1 ( 124 12 124 13 18446744073709551615 21 on_piece_move_invalid 124 13 124 34 47 1 ) 124 34 124 35 18446744073709551615 21 on_piece_move_invalid 125 11 125 32 47 1 ( 125 32 125 33 62 1 * 125 33 125 34 63 10 piece_from 125 34 125 44 60 1 , 125 44 125 45 62 4 from 125 46 125 50 51 1 , 125 50 125 51 62 2 to 125 52 125 54 52 1 ) 125 54 125 55 62 1 ; 125 55 125 56 18446744073709551615 6 return 126 9 126 15 18446744073709551615 5 false 126 16 126 21 18446744073709551615 1 ; 126 21 126 22 18446744073709551615 1 } 127 7 127 8 18446744073709551615 1 } 128 5 128 6 18446744073709551615 4 else 128 7 128 11 18446744073709551615 1 { 128 12 128 13 18446744073709551615 2 if 129 7 129 9 18446744073709551615 1 ( 129 10 129 11 18446744073709551615 21 on_piece_move_missing 129 11 129 32 48 1 ) 129 32 129 33 18446744073709551615 21 on_piece_move_missing 130 9 130 30 48 1 ( 130 30 130 31 62 4 from 130 31 130 35 51 1 ) 130 35 130 36 62 1 ; 130 36 130 37 18446744073709551615 6 return 131 7 131 13 18446744073709551615 5 false 131 14 131 19 18446744073709551615 1 ; 131 19 131 20 18446744073709551615 1 } 132 5 132 6 18446744073709551615 1 } 133 3 133 4 18446744073709551615 1 } 134 1 134 2 18446744073709551615 1 ; 134 2 134 3 18446744073709551615 5 class 136 1 136 6 18446744073709551615 15 ChessBoardPrint 136 7 136 22 74 1 { 136 23 136 24 18446744073709551615 6 public 137 1 137 7 18446744073709551615 1 : 137 7 137 8 18446744073709551615 15 ChessBoardPrint 138 3 138 18 74 1 ( 138 18 138 19 74 10 ChessBoard 138 19 138 29 1 1 & 138 30 138 31 18446744073709551615 5 board 138 31 138 36 75 1 ) 138 36 138 37 74 1 { 138 38 138 39 18446744073709551615 5 board 139 5 139 10 75 1 . 139 10 139 11 18446744073709551615 13 on_piece_move 139 11 139 24 42 1 = 139 25 139 26 76 1 [ 139 27 139 28 18446744073709551615 1 ] 139 28 139 29 18446744073709551615 1 ( 139 29 139 30 18446744073709551615 5 const 139 30 139 35 18446744073709551615 10 ChessBoard 139 36 139 46 1 2 :: 139 46 139 48 18446744073709551615 5 Piece 139 48 139 53 5 1 & 139 54 139 55 18446744073709551615 5 piece 139 55 139 60 77 1 , 139 60 139 61 18446744073709551615 5 const 139 62 139 67 18446744073709551615 6 string 139 68 139 74 9 1 & 139 75 139 76 18446744073709551615 4 from 139 76 139 80 78 1 , 139 80 139 81 18446744073709551615 5 const 139 82 139 87 18446744073709551615 6 string 139 88 139 94 9 1 & 139 95 139 96 18446744073709551615 2 to 139 96 139 98 79 1 ) 139 98 139 99 18446744073709551615 1 { 139 100 139 101 18446744073709551615 4 cout 140 7 140 11 67 2 << 140 12 140 14 68 5 piece 140 15 140 20 77 1 . 140 20 140 21 10 4 type 140 21 140 25 10 1 ( 140 25 140 26 10 1 ) 140 26 140 27 10 2 << 140 28 140 30 68 18 " is moving from " 140 31 140 49 18446744073709551615 2 << 140 50 140 52 68 4 from 140 53 140 57 78 2 << 140 58 140 60 68 6 " to " 140 61 140 67 18446744073709551615 2 << 140 68 140 70 68 2 to 140 71 140 73 79 2 << 140 74 140 76 69 4 endl 140 77 140 81 70 1 ; 140 81 140 82 18446744073709551615 1 } 141 5 141 6 18446744073709551615 1 ; 141 6 141 7 18446744073709551615 5 board 142 5 142 10 75 1 . 142 10 142 11 18446744073709551615 16 on_piece_removed 142 11 142 27 44 1 = 142 28 142 29 76 1 [ 142 30 142 31 18446744073709551615 1 ] 142 31 142 32 18446744073709551615 1 ( 142 32 142 33 18446744073709551615 5 const 142 33 142 38 18446744073709551615 10 ChessBoard 142 39 142 49 1 2 :: 142 49 142 51 18446744073709551615 5 Piece 142 51 142 56 5 1 & 142 57 142 58 18446744073709551615 5 piece 142 58 142 63 80 1 , 142 63 142 64 18446744073709551615 5 const 142 65 142 70 18446744073709551615 6 string 142 71 142 77 9 1 & 142 78 142 79 18446744073709551615 6 square 142 79 142 85 81 1 ) 142 85 142 86 18446744073709551615 1 { 142 87 142 88 18446744073709551615 4 cout 143 7 143 11 67 2 << 143 12 143 14 68 5 piece 143 15 143 20 80 1 . 143 20 143 21 10 4 type 143 21 143 25 10 1 ( 143 25 143 26 10 1 ) 143 26 143 27 10 2 << 143 28 143 30 68 25 " is being removed from " 143 31 143 56 18446744073709551615 2 << 143 57 143 59 68 6 square 143 60 143 66 81 2 << 143 67 143 69 69 4 endl 143 70 143 74 70 1 ; 143 74 143 75 18446744073709551615 1 } 144 5 144 6 18446744073709551615 1 ; 144 6 144 7 18446744073709551615 5 board 145 5 145 10 75 1 . 145 10 145 11 18446744073709551615 12 on_lost_game 145 11 145 23 46 1 = 145 24 145 25 76 1 [ 145 26 145 27 18446744073709551615 1 ] 145 27 145 28 18446744073709551615 1 ( 145 28 145 29 18446744073709551615 10 ChessBoard 145 29 145 39 1 2 :: 145 39 145 41 18446744073709551615 5 Color 145 41 145 46 2 5 color 145 47 145 52 82 1 ) 145 52 145 53 18446744073709551615 1 { 145 54 145 55 18446744073709551615 2 if 146 7 146 9 18446744073709551615 1 ( 146 10 146 11 18446744073709551615 5 color 146 11 146 16 82 2 == 146 17 146 19 18446744073709551615 10 ChessBoard 146 20 146 30 1 2 :: 146 30 146 32 18446744073709551615 5 Color 146 32 146 37 2 2 :: 146 37 146 39 18446744073709551615 5 BLACK 146 39 146 44 4 1 ) 146 44 146 45 18446744073709551615 1 { 146 46 146 47 18446744073709551615 4 cout 147 9 147 13 67 2 << 147 14 147 16 68 8 "Black " 147 17 147 25 18446744073709551615 1 ; 147 25 147 26 18446744073709551615 1 } 148 7 148 8 18446744073709551615 4 else 148 9 148 13 18446744073709551615 1 { 148 14 148 15 18446744073709551615 4 cout 149 9 149 13 67 2 << 149 14 149 16 68 8 "White " 149 17 149 25 18446744073709551615 1 ; 149 25 149 26 18446744073709551615 1 } 150 7 150 8 18446744073709551615 4 cout 151 7 151 11 67 2 << 151 12 151 14 68 14 "won the game" 151 15 151 29 18446744073709551615 2 << 151 30 151 32 69 4 endl 151 33 151 37 70 1 ; 151 37 151 38 18446744073709551615 1 } 152 5 152 6 18446744073709551615 1 ; 152 6 152 7 18446744073709551615 5 board 153 5 153 10 75 1 . 153 10 153 11 18446744073709551615 21 on_piece_move_invalid 153 11 153 32 47 1 = 153 33 153 34 76 1 [ 153 35 153 36 18446744073709551615 1 ] 153 36 153 37 18446744073709551615 1 ( 153 37 153 38 18446744073709551615 5 const 153 38 153 43 18446744073709551615 10 ChessBoard 153 44 153 54 1 2 :: 153 54 153 56 18446744073709551615 5 Piece 153 56 153 61 5 1 & 153 62 153 63 18446744073709551615 5 piece 153 63 153 68 83 1 , 153 68 153 69 18446744073709551615 5 const 153 70 153 75 18446744073709551615 6 string 153 76 153 82 9 1 & 153 83 153 84 18446744073709551615 4 from 153 84 153 88 84 1 , 153 88 153 89 18446744073709551615 5 const 153 90 153 95 18446744073709551615 6 string 153 96 153 102 9 1 & 153 103 153 104 18446744073709551615 2 to 153 104 153 106 85 1 ) 153 106 153 107 18446744073709551615 1 { 153 108 153 109 18446744073709551615 4 cout 154 7 154 11 67 2 << 154 12 154 14 68 15 "can not move " 154 15 154 30 18446744073709551615 2 << 154 31 154 33 68 5 piece 154 34 154 39 83 1 . 154 39 154 40 10 4 type 154 40 154 44 10 1 ( 154 44 154 45 10 1 ) 154 45 154 46 10 2 << 154 47 154 49 68 8 " from " 154 50 154 58 18446744073709551615 2 << 154 59 154 61 68 4 from 154 62 154 66 84 2 << 154 67 154 69 68 6 " to " 154 70 154 76 18446744073709551615 2 << 154 77 154 79 68 2 to 154 80 154 82 85 2 << 154 83 154 85 69 4 endl 154 86 154 90 70 1 ; 154 90 154 91 18446744073709551615 1 } 155 5 155 6 18446744073709551615 1 ; 155 6 155 7 18446744073709551615 5 board 156 5 156 10 75 1 . 156 10 156 11 18446744073709551615 21 on_piece_move_missing 156 11 156 32 48 1 = 156 33 156 34 76 1 [ 156 35 156 36 18446744073709551615 1 ] 156 36 156 37 18446744073709551615 1 ( 156 37 156 38 18446744073709551615 5 const 156 38 156 43 18446744073709551615 6 string 156 44 156 50 9 1 & 156 51 156 52 18446744073709551615 6 square 156 52 156 58 86 1 ) 156 58 156 59 18446744073709551615 1 { 156 60 156 61 18446744073709551615 4 cout 157 7 157 11 67 2 << 157 12 157 14 68 14 "no piece at " 157 15 157 29 18446744073709551615 2 << 157 30 157 32 68 6 square 157 33 157 39 86 2 << 157 40 157 42 69 4 endl 157 43 157 47 70 1 ; 157 47 157 48 18446744073709551615 1 } 158 5 158 6 18446744073709551615 1 ; 158 6 158 7 18446744073709551615 5 board 160 5 160 10 75 1 . 160 10 160 11 18446744073709551615 16 after_piece_move 160 11 160 27 49 1 = 160 28 160 29 76 1 [ 160 30 160 31 18446744073709551615 1 & 160 31 160 32 18446744073709551615 5 board 160 32 160 37 75 1 ] 160 37 160 38 18446744073709551615 1 ( 160 38 160 39 18446744073709551615 1 ) 160 39 160 40 18446744073709551615 1 { 160 41 160 42 18446744073709551615 3 int 161 7 161 10 18446744073709551615 7 counter 161 11 161 18 87 1 = 161 19 161 20 18446744073709551615 1 1 161 21 161 22 18446744073709551615 1 ; 161 22 161 23 18446744073709551615 6 vector 162 7 162 13 36 1 < 162 13 162 14 18446744073709551615 4 char 162 14 162 18 18446744073709551615 1 > 162 18 162 19 18446744073709551615 7 letters 162 20 162 27 88 1 = 162 28 162 29 18446744073709551615 1 { 162 30 162 31 18446744073709551615 3 'A' 162 31 162 34 18446744073709551615 1 , 162 34 162 35 18446744073709551615 3 'B' 162 36 162 39 18446744073709551615 1 , 162 39 162 40 18446744073709551615 3 'C' 162 41 162 44 18446744073709551615 1 , 162 44 162 45 18446744073709551615 3 'D' 162 46 162 49 18446744073709551615 1 , 162 49 162 50 18446744073709551615 3 'E' 162 51 162 54 18446744073709551615 1 , 162 54 162 55 18446744073709551615 3 'F' 162 56 162 59 18446744073709551615 1 , 162 59 162 60 18446744073709551615 3 'G' 162 61 162 64 18446744073709551615 1 , 162 64 162 65 18446744073709551615 3 'H' 162 66 162 69 18446744073709551615 1 } 162 69 162 70 18446744073709551615 1 ; 162 70 162 71 18446744073709551615 4 cout 163 7 163 11 67 2 << 163 12 163 14 68 8 "\n\n\n" 163 15 163 23 18446744073709551615 1 ; 163 23 163 24 18446744073709551615 23 //To get under messages 163 25 163 48 18446744073709551615 3 for 164 7 164 10 18446744073709551615 1 ( 164 11 164 12 18446744073709551615 6 string 164 12 164 18 9 2 :: 164 18 164 20 18446744073709551615 9 size_type 164 20 164 29 89 1 h 164 30 164 31 90 1 = 164 32 164 33 18446744073709551615 1 0 164 34 164 35 18446744073709551615 1 ; 164 35 164 36 18446744073709551615 1 h 164 37 164 38 90 1 < 164 39 164 40 18446744073709551615 7 letters 164 41 164 48 88 1 . 164 48 164 49 91 4 size 164 49 164 53 91 1 ( 164 53 164 54 91 1 ) 164 54 164 55 91 1 ; 164 55 164 56 18446744073709551615 2 ++ 164 57 164 59 18446744073709551615 1 h 164 59 164 60 90 1 ) 164 60 164 61 18446744073709551615 4 cout 165 9 165 13 67 2 << 165 14 165 16 68 9 "       " 165 17 165 26 18446744073709551615 2 << 165 27 165 29 68 7 letters 165 30 165 37 88 1 . 165 37 165 38 92 2 at 165 38 165 40 92 1 ( 165 40 165 41 92 1 h 165 41 165 42 90 1 ) 165 42 165 43 92 2 << 165 44 165 46 68 7 "     " 165 47 165 54 18446744073709551615 1 ; 165 54 165 55 18446744073709551615 4 cout 166 7 166 11 67 2 << 166 12 166 14 69 4 endl 166 15 166 19 70 1 ; 166 19 166 20 18446744073709551615 3 for 167 7 167 10 18446744073709551615 1 ( 167 11 167 12 18446744073709551615 3 int 167 12 167 15 18446744073709551615 1 i 167 16 167 17 93 1 = 167 18 167 19 18446744073709551615 1 0 167 20 167 21 18446744073709551615 1 ; 167 21 167 22 18446744073709551615 1 i 167 23 167 24 93 1 < 167 25 167 26 18446744073709551615 1 8 167 27 167 28 18446744073709551615 1 ; 167 28 167 29 18446744073709551615 2 ++ 167 30 167 32 18446744073709551615 1 i 167 32 167 33 93 1 ) 167 33 167 34 18446744073709551615 1 { 167 35 167 36 18446744073709551615 4 cout 168 9 168 13 67 2 << 168 14 168 16 69 7 counter 168 17 168 24 87 1 ; 168 24 168 25 18446744073709551615 3 for 169 9 169 12 18446744073709551615 1 ( 169 13 169 14 18446744073709551615 3 int 169 14 169 17 18446744073709551615 1 j 169 18 169 19 94 1 = 169 20 169 21 18446744073709551615 1 0 169 22 169 23 18446744073709551615 1 ; 169 23 169 24 18446744073709551615 1 j 169 25 169 26 94 1 < 169 27 169 28 18446744073709551615 1 8 169 29 169 30 18446744073709551615 1 ; 169 30 169 31 18446744073709551615 2 ++ 169 32 169 34 18446744073709551615 1 j 169 34 169 35 94 1 ) 169 35 169 36 18446744073709551615 1 { 169 37 169 38 18446744073709551615 4 auto 170 11 170 15 18446744073709551615 1 & 170 16 170 17 18446744073709551615 5 piece 170 17 170 22 95 1 = 170 23 170 24 18446744073709551615 5 board 170 25 170 30 75 1 . 170 30 170 31 18446744073709551615 7 squares 170 31 170 38 32 1 [ 170 38 170 39 61 1 j 170 39 170 40 94 1 ] 170 40 170 41 61 1 [ 170 41 170 42 61 1 i 170 42 170 43 93 1 ] 170 43 170 44 61 1 ; 170 44 170 45 18446744073709551615 5 piece 171 11 171 16 95 2 != 171 17 171 19 71 7 nullptr 171 20 171 27 18446744073709551615 1 ? 171 28 171 29 18446744073709551615 4 cout 171 30 171 34 67 2 << 171 35 171 37 68 7 "|____" 171 38 171 45 18446744073709551615 2 << 171 46 171 48 68 5 piece 171 49 171 54 95 2 -> 171 54 171 56 16 7 acronym 171 56 171 63 16 1 ( 171 63 171 64 16 1 ) 171 64 171 65 16 1 + 171 66 171 67 19 6 "____" 171 68 171 74 18446744073709551615 1 : 171 75 171 76 18446744073709551615 4 cout 171 77 171 81 67 2 << 171 82 171 84 68 15 "|____________" 171 85 171 100 18446744073709551615 1 ; 171 100 171 101 18446744073709551615 1 } 172 9 172 10 18446744073709551615 4 cout 173 9 173 13 67 2 << 173 14 173 16 68 5 "|\n" 173 17 173 22 18446744073709551615 1 ; 173 22 173 23 18446744073709551615 2 ++ 174 9 174 11 18446744073709551615 7 counter 174 11 174 18 87 1 ; 174 18 174 19 18446744073709551615 4 cout 175 9 175 13 67 2 << 175 14 175 16 69 4 endl 175 17 175 21 70 1 ; 175 21 175 22 18446744073709551615 1 } 176 7 176 8 18446744073709551615 1 } 177 5 177 6 18446744073709551615 1 ; 177 6 177 7 18446744073709551615 1 } 178 3 178 4 18446744073709551615 1 ; 178 4 178 5 18446744073709551615 1 } 179 1 179 2 18446744073709551615 1 ; 179 2 179 3 18446744073709551615 3 int 181 1 181 4 18446744073709551615 4 main 181 5 181 9 96 1 ( 181 9 181 10 96 1 ) 181 10 181 11 96 1 { 181 12 181 13 18446744073709551615 10 ChessBoard 182 3 182 13 1 5 board 182 14 182 19 97 1 ; 182 19 182 20 18446744073709551615 15 ChessBoardPrint 183 3 183 18 74 5 print 183 19 183 24 98 1 ( 183 24 183 25 74 5 board 183 25 183 30 97 1 ) 183 30 183 31 74 1 ; 183 31 183 32 18446744073709551615 5 board 185 3 185 8 97 1 . 185 8 185 9 18446744073709551615 7 squares 185 9 185 16 32 1 [ 185 16 185 17 61 1 4 185 17 185 18 18446744073709551615 1 ] 185 18 185 19 61 1 [ 185 19 185 20 61 1 0 185 20 185 21 18446744073709551615 1 ] 185 21 185 22 61 1 = 185 23 185 24 72 11 make_unique 185 25 185 36 99 1 < 185 36 185 37 99 10 ChessBoard 185 37 185 47 1 2 :: 185 47 185 49 99 4 King 185 49 185 53 17 1 > 185 53 185 54 99 1 ( 185 54 185 55 99 10 ChessBoard 185 55 185 65 1 2 :: 185 65 185 67 18446744073709551615 5 Color 185 67 185 72 2 2 :: 185 72 185 74 18446744073709551615 5 WHITE 185 74 185 79 3 1 ) 185 79 185 80 99 1 ; 185 80 185 81 18446744073709551615 5 board 186 3 186 8 97 1 . 186 8 186 9 18446744073709551615 7 squares 186 9 186 16 32 1 [ 186 16 186 17 61 1 1 186 17 186 18 18446744073709551615 1 ] 186 18 186 19 61 1 [ 186 19 186 20 61 1 0 186 20 186 21 18446744073709551615 1 ] 186 21 186 22 61 1 = 186 23 186 24 72 11 make_unique 186 25 186 36 99 1 < 186 36 186 37 99 10 ChessBoard 186 37 186 47 1 2 :: 186 47 186 49 99 6 Knight 186 49 186 55 26 1 > 186 55 186 56 99 1 ( 186 56 186 57 99 10 ChessBoard 186 57 186 67 1 2 :: 186 67 186 69 18446744073709551615 5 Color 186 69 186 74 2 2 :: 186 74 186 76 18446744073709551615 5 WHITE 186 76 186 81 3 1 ) 186 81 186 82 99 1 ; 186 82 186 83 18446744073709551615 5 board 187 3 187 8 97 1 . 187 8 187 9 18446744073709551615 7 squares 187 9 187 16 32 1 [ 187 16 187 17 61 1 6 187 17 187 18 18446744073709551615 1 ] 187 18 187 19 61 1 [ 187 19 187 20 61 1 0 187 20 187 21 18446744073709551615 1 ] 187 21 187 22 61 1 = 187 23 187 24 72 11 make_unique 187 25 187 36 99 1 < 187 36 187 37 99 10 ChessBoard 187 37 187 47 1 2 :: 187 47 187 49 99 6 Knight 187 49 187 55 26 1 > 187 55 187 56 99 1 ( 187 56 187 57 99 10 ChessBoard 187 57 187 67 1 2 :: 187 67 187 69 18446744073709551615 5 Color 187 69 187 74 2 2 :: 187 74 187 76 18446744073709551615 5 WHITE 187 76 187 81 3 1 ) 187 81 187 82 99 1 ; 187 82 187 83 18446744073709551615 5 board 189 3 189 8 97 1 . 189 8 189 9 18446744073709551615 7 squares 189 9 189 16 32 1 [ 189 16 189 17 61 1 4 189 17 189 18 18446744073709551615 1 ] 189 18 189 19 61 1 [ 189 19 189 20 61 1 7 189 20 189 21 18446744073709551615 1 ] 189 21 189 22 61 1 = 189 23 189 24 72 11 make_unique 189 25 189 36 99 1 < 189 36 189 37 99 10 ChessBoard 189 37 189 47 1 2 :: 189 47 189 49 99 4 King 189 49 189 53 17 1 > 189 53 189 54 99 1 ( 189 54 189 55 99 10 ChessBoard 189 55 189 65 1 2 :: 189 65 189 67 18446744073709551615 5 Color 189 67 189 72 2 2 :: 189 72 189 74 18446744073709551615 5 BLACK 189 74 189 79 4 1 ) 189 79 189 80 99 1 ; 189 80 189 81 18446744073709551615 5 board 190 3 190 8 97 1 . 190 8 190 9 18446744073709551615 7 squares 190 9 190 16 32 1 [ 190 16 190 17 61 1 1 190 17 190 18 18446744073709551615 1 ] 190 18 190 19 61 1 [ 190 19 190 20 61 1 7 190 20 190 21 18446744073709551615 1 ] 190 21 190 22 61 1 = 190 23 190 24 72 11 make_unique 190 25 190 36 99 1 < 190 36 190 37 99 10 ChessBoard 190 37 190 47 1 2 :: 190 47 190 49 99 6 Knight 190 49 190 55 26 1 > 190 55 190 56 99 1 ( 190 56 190 57 99 10 ChessBoard 190 57 190 67 1 2 :: 190 67 190 69 18446744073709551615 5 Color 190 69 190 74 2 2 :: 190 74 190 76 18446744073709551615 5 BLACK 190 76 190 81 4 1 ) 190 81 190 82 99 1 ; 190 82 190 83 18446744073709551615 5 board 191 3 191 8 97 1 . 191 8 191 9 18446744073709551615 7 squares 191 9 191 16 32 1 [ 191 16 191 17 61 1 6 191 17 191 18 18446744073709551615 1 ] 191 18 191 19 61 1 [ 191 19 191 20 61 1 7 191 20 191 21 18446744073709551615 1 ] 191 21 191 22 61 1 = 191 23 191 24 72 11 make_unique 191 25 191 36 99 1 < 191 36 191 37 99 10 ChessBoard 191 37 191 47 1 2 :: 191 47 191 49 99 6 Knight 191 49 191 55 26 1 > 191 55 191 56 99 1 ( 191 56 191 57 99 10 ChessBoard 191 57 191 67 1 2 :: 191 67 191 69 18446744073709551615 5 Color 191 69 191 74 2 2 :: 191 74 191 76 18446744073709551615 5 BLACK 191 76 191 81 4 1 ) 191 81 191 82 99 1 ; 191 82 191 83 18446744073709551615 4 cout 193 3 193 7 67 2 << 193 8 193 10 68 16 "Invalid moves:" 193 11 193 27 18446744073709551615 2 << 193 28 193 30 69 4 endl 193 31 193 35 70 1 ; 193 35 193 36 18446744073709551615 5 board 194 3 194 8 97 1 . 194 8 194 9 50 10 move_piece 194 9 194 19 50 1 ( 194 19 194 20 50 4 "e3" 194 20 194 24 18446744073709551615 1 , 194 24 194 25 50 4 "e2" 194 26 194 30 18446744073709551615 1 ) 194 30 194 31 50 1 ; 194 31 194 32 18446744073709551615 5 board 195 3 195 8 97 1 . 195 8 195 9 50 10 move_piece 195 9 195 19 50 1 ( 195 19 195 20 50 4 "e1" 195 20 195 24 18446744073709551615 1 , 195 24 195 25 50 4 "e3" 195 26 195 30 18446744073709551615 1 ) 195 30 195 31 50 1 ; 195 31 195 32 18446744073709551615 5 board 196 3 196 8 97 1 . 196 8 196 9 50 10 move_piece 196 9 196 19 50 1 ( 196 19 196 20 50 4 "b1" 196 20 196 24 18446744073709551615 1 , 196 24 196 25 50 4 "b2" 196 26 196 30 18446744073709551615 1 ) 196 30 196 31 50 1 ; 196 31 196 32 18446744073709551615 4 cout 197 3 197 7 67 2 << 197 8 197 10 69 4 endl 197 11 197 15 70 1 ; 197 15 197 16 18446744073709551615 5 board 199 3 199 8 97 1 . 199 8 199 9 18446744073709551615 16 after_piece_move 199 9 199 25 49 1 ( 199 25 199 26 62 1 ) 199 26 199 27 62 1 ; 199 27 199 28 18446744073709551615 4 cout 201 3 201 7 67 2 << 201 8 201 10 68 19 "A simulated game:" 201 11 201 30 18446744073709551615 2 << 201 31 201 33 69 4 endl 201 34 201 38 70 1 ; 201 38 201 39 18446744073709551615 5 board 202 3 202 8 97 1 . 202 8 202 9 50 10 move_piece 202 9 202 19 50 1 ( 202 19 202 20 50 4 "e1" 202 20 202 24 18446744073709551615 1 , 202 24 202 25 50 4 "e2" 202 26 202 30 18446744073709551615 1 ) 202 30 202 31 50 1 ; 202 31 202 32 18446744073709551615 5 board 203 3 203 8 97 1 . 203 8 203 9 50 10 move_piece 203 9 203 19 50 1 ( 203 19 203 20 50 4 "g8" 203 20 203 24 18446744073709551615 1 , 203 24 203 25 50 4 "h6" 203 26 203 30 18446744073709551615 1 ) 203 30 203 31 50 1 ; 203 31 203 32 18446744073709551615 5 board 204 3 204 8 97 1 . 204 8 204 9 50 10 move_piece 204 9 204 19 50 1 ( 204 19 204 20 50 4 "b1" 204 20 204 24 18446744073709551615 1 , 204 24 204 25 50 4 "c3" 204 26 204 30 18446744073709551615 1 ) 204 30 204 31 50 1 ; 204 31 204 32 18446744073709551615 5 board 205 3 205 8 97 1 . 205 8 205 9 50 10 move_piece 205 9 205 19 50 1 ( 205 19 205 20 50 4 "h6" 205 20 205 24 18446744073709551615 1 , 205 24 205 25 50 4 "g8" 205 26 205 30 18446744073709551615 1 ) 205 30 205 31 50 1 ; 205 31 205 32 18446744073709551615 5 board 206 3 206 8 97 1 . 206 8 206 9 50 10 move_piece 206 9 206 19 50 1 ( 206 19 206 20 50 4 "c3" 206 20 206 24 18446744073709551615 1 , 206 24 206 25 50 4 "d5" 206 26 206 30 18446744073709551615 1 ) 206 30 206 31 50 1 ; 206 31 206 32 18446744073709551615 5 board 207 3 207 8 97 1 . 207 8 207 9 50 10 move_piece 207 9 207 19 50 1 ( 207 19 207 20 50 4 "g8" 207 20 207 24 18446744073709551615 1 , 207 24 207 25 50 4 "h6" 207 26 207 30 18446744073709551615 1 ) 207 30 207 31 50 1 ; 207 31 207 32 18446744073709551615 5 board 208 3 208 8 97 1 . 208 8 208 9 50 10 move_piece 208 9 208 19 50 1 ( 208 19 208 20 50 4 "d5" 208 20 208 24 18446744073709551615 1 , 208 24 208 25 50 4 "f6" 208 26 208 30 18446744073709551615 1 ) 208 30 208 31 50 1 ; 208 31 208 32 18446744073709551615 5 board 209 3 209 8 97 1 . 209 8 209 9 50 10 move_piece 209 9 209 19 50 1 ( 209 19 209 20 50 4 "h6" 209 20 209 24 18446744073709551615 1 , 209 24 209 25 50 4 "g8" 209 26 209 30 18446744073709551615 1 ) 209 30 209 31 50 1 ; 209 31 209 32 18446744073709551615 5 board 210 3 210 8 97 1 . 210 8 210 9 50 10 move_piece 210 9 210 19 50 1 ( 210 19 210 20 50 4 "f6" 210 20 210 24 18446744073709551615 1 , 210 24 210 25 50 4 "e8" 210 26 210 30 18446744073709551615 1 ) 210 30 210 31 50 1 ; 210 31 210 32 18446744073709551615 1 } 211 1 211 2 18446744073709551615 0 0 100 0 0 0 22 0 0 1 2 0 3 std 4 1 2 0 10 ChessBoard 5 1 2 0 16 Color:ChessBoard 7 1 2 0 22 WHITE:Color:ChessBoard 7 1 2 0 22 BLACK:Color:ChessBoard 4 1 2 0 16 Piece:ChessBoard 10 1 2 0 87 16:17:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 6 1 2 0 22 color:Piece:ChessBoard 21 1 2 0 29 color_string:Piece:ChessBoard 20 1 2 0 14 string:__1:std 21 1 2 0 21 type:Piece:ChessBoard 21 1 2 0 27 valid_move:Piece:ChessBoard 10 1 2 0 87 31:33:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 10 1 2 0 87 31:45:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 10 1 2 0 87 31:57:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 10 1 2 0 87 31:67:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 21 1 2 0 24 acronym:Piece:ChessBoard 4 1 2 0 15 King:ChessBoard 10 1 2 0 87 38:16:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 8 1 2 0 17 operator+:__1:std 10 1 2 0 87 43:25:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 10 1 2 0 87 43:37:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 10 1 2 0 87 43:49:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 10 1 2 0 87 43:59:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 8 1 2 0 3 abs 8 1 2 0 18 operator==:__1:std 4 1 2 0 17 Knight:ChessBoard 10 1 2 0 87 54:18:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 10 1 2 0 87 60:25:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 10 1 2 0 87 60:37:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 10 1 2 0 87 60:49:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 10 1 2 0 87 60:59:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 6 1 2 0 18 squares:ChessBoard 21 1 2 0 21 resize:vector:__1:std 9 1 2 0 87 72:16:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 21 1 2 0 29 operator*:__wrap_iter:__1:std 31 1 2 0 14 vector:__1:std 31 1 2 0 18 unique_ptr:__1:std 31 1 2 0 16 function:__1:std 10 1 2 0 5 piece 10 1 2 0 4 from 10 1 2 0 2 to 6 1 2 0 24 on_piece_move:ChessBoard 10 1 2 0 6 square 6 1 2 0 27 on_piece_removed:ChessBoard 10 1 2 0 5 color 6 1 2 0 23 on_lost_game:ChessBoard 6 1 2 0 32 on_piece_move_invalid:ChessBoard 6 1 2 0 32 on_piece_move_missing:ChessBoard 6 1 2 0 27 after_piece_move:ChessBoard 21 1 2 0 21 move_piece:ChessBoard 10 1 2 0 87 88:38:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 10 1 2 0 87 88:63:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 9 1 2 0 86 89:9:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 21 1 2 0 31 operator[]:basic_string:__1:std 9 1 2 0 86 90:9:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 8 1 2 0 12 stoi:__1:std 24 1 2 0 20 basic_string:__1:std 9 1 2 0 86 91:9:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 9 1 2 0 86 92:9:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 9 1 2 0 87 94:11:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 21 1 2 0 25 operator[]:vector:__1:std 21 1 2 0 25 operator:function:__1:std 21 1 2 0 28 operator*:unique_ptr:__1:std 9 1 2 0 87 99:15:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 9 1 2 0 88 104:22:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 21 1 2 0 22 get:unique_ptr:__1:std 9 1 2 0 12 cout:__1:std 8 1 2 0 16 operator:__1:std 21 1 2 0 30 operator:basic_ostream:__1:std 8 1 2 0 12 endl:__1:std 8 1 2 0 18 operator!=:__1:std 21 1 2 0 28 operator=:unique_ptr:__1:std 8 1 2 0 12 move:__1:std 4 1 2 0 15 ChessBoardPrint 10 1 2 0 88 138:31:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 21 1 2 0 26 operator=:function:__1:std 10 1 2 0 88 139:55:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 10 1 2 0 88 139:76:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 10 1 2 0 88 139:96:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 10 1 2 0 88 142:58:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 10 1 2 0 88 142:79:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 10 1 2 0 88 145:47:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 10 1 2 0 88 153:63:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 10 1 2 0 88 153:84:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 10 1 2 0 89 153:104:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 10 1 2 0 88 156:52:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 9 1 2 0 88 161:11:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 9 1 2 0 88 162:20:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 20 1 2 0 30 size_type:basic_string:__1:std 9 1 2 0 88 164:30:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 21 1 2 0 19 size:vector:__1:std 21 1 2 0 17 at:vector:__1:std 9 1 2 0 88 167:16:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 9 1 2 0 88 169:18:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 9 1 2 0 88 170:17:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 8 1 2 0 4 main 9 1 2 0 88 182:14:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 9 1 2 0 88 183:19:/Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 8 1 2 0 19 make_unique:__1:std 0 0 1 0 0 0 81 /Users/ianevangelista/OneDrive - NTNU/Dataingeniør/3. klasse/C++/Oving6/main.cpp 1599491948